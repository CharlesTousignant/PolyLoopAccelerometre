
ADXL355_SPI_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e74  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005190  08005190  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005198  08005198  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08005210  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08005210  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb27  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa8  00000000  00000000  0002ebc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  000317a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de36  00000000  00000000  00032308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5ef  00000000  00000000  0005013e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba65f  00000000  00000000  0005e72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118d8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c0  00000000  00000000  00118ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800503c 	.word	0x0800503c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800503c 	.word	0x0800503c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <selectAccelerometer>:
		GPIOA->ODR |= actualOuputs;
		// GPIOA->ODR |= 0x7 | 1 << 4 | 1 << 8 | 1 << 9 | 1 << 10;
	//}
}

void selectAccelerometer(){
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(1 << 11);
 80005c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005d6:	6153      	str	r3, [r2, #20]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <deselectAccelerometer>:
void deselectAccelerometer(){
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
	GPIOA->ODR |= 1 << 11;
 80005e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005f4:	6153      	str	r3, [r2, #20]
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <SPI_Write>:

void setAccelMeasurementRange(){

}
void SPI_Write(uint8_t ui8address, uint8_t ui8Data, uint8_t ui8Data2, enWriteData enMode)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	4604      	mov	r4, r0
 8000608:	4608      	mov	r0, r1
 800060a:	4611      	mov	r1, r2
 800060c:	461a      	mov	r2, r3
 800060e:	4623      	mov	r3, r4
 8000610:	71fb      	strb	r3, [r7, #7]
 8000612:	4603      	mov	r3, r0
 8000614:	71bb      	strb	r3, [r7, #6]
 8000616:	460b      	mov	r3, r1
 8000618:	717b      	strb	r3, [r7, #5]
 800061a:	4613      	mov	r3, r2
 800061c:	713b      	strb	r3, [r7, #4]
   uint8_t ui8writeAddress;
   ui8writeAddress = ((ui8address <<1)|ADXL355_WRITE);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	73fb      	strb	r3, [r7, #15]

   if(enMode == SPI_WRITE_ONE_REG) {
 8000626:	793b      	ldrb	r3, [r7, #4]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d123      	bne.n	8000674 <SPI_Write+0x74>
      selectAccelerometer();        /* Select accelerometer */
 800062c:	f7ff ffca 	bl	80005c4 <selectAccelerometer>

      // SpiFifoFlush(pADI_SPI0, SPICON_TFLUSH_EN, SPICON_RFLUSH_EN);      /* Flush Tx and Rx FIFOs */
      data_tx[0] = ui8writeAddress;
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <SPI_Write+0x7c>)
 8000634:	701a      	strb	r2, [r3, #0]
      data_tx[1] = ui8Data;
 8000636:	79ba      	ldrb	r2, [r7, #6]
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <SPI_Write+0x7c>)
 800063a:	705a      	strb	r2, [r3, #1]
      HAL_SPI_Transmit(&hspi1, &ui8writeAddress, 1, 1000);     /* Send register address */
 800063c:	f107 010f 	add.w	r1, r7, #15
 8000640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000644:	2201      	movs	r2, #1
 8000646:	480e      	ldr	r0, [pc, #56]	; (8000680 <SPI_Write+0x80>)
 8000648:	f001 ffeb 	bl	8002622 <HAL_SPI_Transmit>

      HAL_SPI_Transmit(&hspi1, &ui8Data, 1, 1000);             /* Send value to be written */
 800064c:	1db9      	adds	r1, r7, #6
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	2201      	movs	r2, #1
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <SPI_Write+0x80>)
 8000656:	f001 ffe4 	bl	8002622 <HAL_SPI_Transmit>
      HAL_Delay(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065e:	f000 fcbd 	bl	8000fdc <HAL_Delay>
      // while (!(SPI1->SR & SPI_SR_RXNE)); // Wait while receive buffer is empty
      // while ((SpiSta(pADI_SPI0) & SPI0STA_RXFSTA_TWOBYTES) != SPI0STA_RXFSTA_TWOBYTES);        /* Wait until 2  bytes are received */ --- 2 ou 3??
      HAL_SPI_Receive(&hspi1, (uint8_t*)NULL, 2, 1000);
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	2202      	movs	r2, #2
 8000668:	2100      	movs	r1, #0
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <SPI_Write+0x80>)
 800066c:	f002 f947 	bl	80028fe <HAL_SPI_Receive>

      deselectAccelerometer();         /* Deselect accelerometer */
 8000670:	f7ff ffb7 	bl	80005e2 <deselectAccelerometer>
   }

}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}
 800067c:	20000180 	.word	0x20000180
 8000680:	2000008c 	.word	0x2000008c

08000684 <SPI_Read>:

uint32_t SPI_Read(uint8_t ui8address, enRegsNum enRegs)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]

   uint32_t ui32Result = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]

   uint8_t ui32valueL = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	74fb      	strb	r3, [r7, #19]
   uint8_t ui32valueM __attribute__((unused)) = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	74bb      	strb	r3, [r7, #18]
   uint8_t ui32valueH = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	747b      	strb	r3, [r7, #17]

   uint8_t testingSomething[3];
   uint8_t ui8writeAddress;
   ui8writeAddress = ((ui8address <<1)|ADXL355_READ);
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

   selectAccelerometer();      /* Select accelerometer */
 80006b4:	f7ff ff86 	bl	80005c4 <selectAccelerometer>

   // SpiFifoFlush(pADI_SPI0, SPICON_TFLUSH_EN, SPICON_RFLUSH_EN);       /* Flush Tx and Rx FIFOs */

   HAL_SPI_Transmit(&hspi1, &ui8writeAddress, 1, 1000);       /* Send register address */
 80006b8:	f107 010b 	add.w	r1, r7, #11
 80006bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c0:	2201      	movs	r2, #1
 80006c2:	4830      	ldr	r0, [pc, #192]	; (8000784 <SPI_Read+0x100>)
 80006c4:	f001 ffad 	bl	8002622 <HAL_SPI_Transmit>

   // uint8_t dummyInfo = 0xAA;
   // HAL_SPI_Transmit(&hspi1, &dummyInfo, 1, 100);               /* Send a dummy byte in order to receive the register value */

   if (enRegs == SPI_READ_ONE_REG) {
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d10f      	bne.n	80006ee <SPI_Read+0x6a>

	  // HAL_SPI_Receive(&hspi1, (uint8_t*)NULL, 2, 100);    /* Wait until 2 bytes are received */

      ui32valueL = HAL_SPI_Receive(&hspi1, (uint8_t*)NULL, 1, 100);;            /* One dummy read */
 80006ce:	2364      	movs	r3, #100	; 0x64
 80006d0:	2201      	movs	r2, #1
 80006d2:	2100      	movs	r1, #0
 80006d4:	482b      	ldr	r0, [pc, #172]	; (8000784 <SPI_Read+0x100>)
 80006d6:	f002 f912 	bl	80028fe <HAL_SPI_Receive>
 80006da:	4603      	mov	r3, r0
 80006dc:	74fb      	strb	r3, [r7, #19]

      ui32Result = HAL_SPI_Receive(&hspi1, (uint8_t*)NULL, 1, 100);;            /* Set read result*/
 80006de:	2364      	movs	r3, #100	; 0x64
 80006e0:	2201      	movs	r2, #1
 80006e2:	2100      	movs	r1, #0
 80006e4:	4827      	ldr	r0, [pc, #156]	; (8000784 <SPI_Read+0x100>)
 80006e6:	f002 f90a 	bl	80028fe <HAL_SPI_Receive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	617b      	str	r3, [r7, #20]

   }
   if (enRegs == SPI_READ_TWO_REG) {          /* Only used for Temp & X,Y,Z offset and threshold registers*/
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d119      	bne.n	8000728 <SPI_Read+0xa4>

	  // HAL_SPI_Transmit(&hspi1, &dummyInfo, 1, 100);                /* Send a dummy byte in order to receive the register value */

	  // HAL_SPI_Receive(&hspi1, (uint8_t*)NULL, 3, 100);    /* Wait until 3 bytes are received */

      HAL_SPI_Receive(&hspi1, &ui32valueL, 1, 100);             /* One dummy read */
 80006f4:	f107 0113 	add.w	r1, r7, #19
 80006f8:	2364      	movs	r3, #100	; 0x64
 80006fa:	2201      	movs	r2, #1
 80006fc:	4821      	ldr	r0, [pc, #132]	; (8000784 <SPI_Read+0x100>)
 80006fe:	f002 f8fe 	bl	80028fe <HAL_SPI_Receive>


      HAL_SPI_Receive(&hspi1, &ui32valueH, 1, 100);         /* Read the register value */
 8000702:	f107 0111 	add.w	r1, r7, #17
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	481e      	ldr	r0, [pc, #120]	; (8000784 <SPI_Read+0x100>)
 800070c:	f002 f8f7 	bl	80028fe <HAL_SPI_Receive>
      HAL_SPI_Receive(&hspi1, &ui32valueL, 1, 100);
 8000710:	f107 0113 	add.w	r1, r7, #19
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	2201      	movs	r2, #1
 8000718:	481a      	ldr	r0, [pc, #104]	; (8000784 <SPI_Read+0x100>)
 800071a:	f002 f8f0 	bl	80028fe <HAL_SPI_Receive>

      ui32Result = ((ui32valueH << 8) | ui32valueL); /* Set read result*/
 800071e:	7c7b      	ldrb	r3, [r7, #17]
 8000720:	021b      	lsls	r3, r3, #8
 8000722:	7cfa      	ldrb	r2, [r7, #19]
 8000724:	4313      	orrs	r3, r2
 8000726:	617b      	str	r3, [r7, #20]

   }
   if (enRegs == SPI_READ_THREE_REG) {          /* Only used for X,Y,Z axis data registers*/
 8000728:	79bb      	ldrb	r3, [r7, #6]
 800072a:	2b03      	cmp	r3, #3
 800072c:	d11f      	bne.n	800076e <SPI_Read+0xea>

       // HAL_SPI_Receive(&hspi1, &ui32valueL, 1, 1000);             /* One dummy read */
	   // while (!(SPI1->SR & SPI_SR_RXNE)); // Wait while receive buffer is empty


       HAL_SPI_Receive(&hspi1, &ui32valueH, 1, 1000);             /* Read the register value */
 800072e:	f107 0111 	add.w	r1, r7, #17
 8000732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000736:	2201      	movs	r2, #1
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <SPI_Read+0x100>)
 800073a:	f002 f8e0 	bl	80028fe <HAL_SPI_Receive>
       HAL_SPI_Receive(&hspi1, &ui32valueM, 1, 1000);
 800073e:	f107 0112 	add.w	r1, r7, #18
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	2201      	movs	r2, #1
 8000748:	480e      	ldr	r0, [pc, #56]	; (8000784 <SPI_Read+0x100>)
 800074a:	f002 f8d8 	bl	80028fe <HAL_SPI_Receive>
       HAL_SPI_Receive(&hspi1, &ui32valueL, 1, 1000);
 800074e:	f107 0113 	add.w	r1, r7, #19
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	2201      	movs	r2, #1
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <SPI_Read+0x100>)
 800075a:	f002 f8d0 	bl	80028fe <HAL_SPI_Receive>
      // HAL_SPI_Receive(&hspi1, testingSomething, 3, 100);


      ui32Result = ((ui32valueH << 16) | (ui32valueM << 8) | ui32valueL); /* Set read result*/
 800075e:	7c7b      	ldrb	r3, [r7, #17]
 8000760:	041a      	lsls	r2, r3, #16
 8000762:	7cbb      	ldrb	r3, [r7, #18]
 8000764:	021b      	lsls	r3, r3, #8
 8000766:	4313      	orrs	r3, r2
 8000768:	7cfa      	ldrb	r2, [r7, #19]
 800076a:	4313      	orrs	r3, r2
 800076c:	617b      	str	r3, [r7, #20]

   }
   HAL_Delay(500);
 800076e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000772:	f000 fc33 	bl	8000fdc <HAL_Delay>
   deselectAccelerometer();          /* Deselect accelerometer */
 8000776:	f7ff ff34 	bl	80005e2 <deselectAccelerometer>

   return ui32Result;
 800077a:	697b      	ldr	r3, [r7, #20]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000008c 	.word	0x2000008c

08000788 <ADXL355_Start_Sensor>:

void ADXL355_Start_Sensor(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
   // SPI_Write(RANGE, 0x81, 0x00, SPI_WRITE_ONE_REG);
	SPI_Write(RANGE, 0x01, 0x00, SPI_WRITE_ONE_REG);
 800078c:	2301      	movs	r3, #1
 800078e:	2200      	movs	r2, #0
 8000790:	2101      	movs	r1, #1
 8000792:	202c      	movs	r0, #44	; 0x2c
 8000794:	f7ff ff34 	bl	8000600 <SPI_Write>

   // ui8temp = (uint8_t)SPI_Read(POWER_CTL, SPI_READ_ONE_REG);       /* Read POWER_CTL register, before modifying it */

   // ui8temp = ui8temp & 0xFE;                                          /* Set measurement bit in POWER_CTL register */

   SPI_Write(POWER_CTL, 0x06, 0x00, SPI_WRITE_ONE_REG);                    /* Write the new value to POWER_CTL register */
 8000798:	2301      	movs	r3, #1
 800079a:	2200      	movs	r2, #0
 800079c:	2106      	movs	r1, #6
 800079e:	202d      	movs	r0, #45	; 0x2d
 80007a0:	f7ff ff2e 	bl	8000600 <SPI_Write>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <ADXL355_Acceleration_Data_Conversion>:

int32_t ADXL355_Acceleration_Data_Conversion (uint32_t ui32SensorData)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
   int32_t volatile i32Conversion = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]

   ui32SensorData = (ui32SensorData  >> 4);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	091b      	lsrs	r3, r3, #4
 80007b8:	607b      	str	r3, [r7, #4]
   ui32SensorData = (ui32SensorData & 0x000FFFFF);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80007c0:	607b      	str	r3, [r7, #4]

   if((ui32SensorData & 0x00080000)  == 0x00080000){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d006      	beq.n	80007da <ADXL355_Acceleration_Data_Conversion+0x32>

         i32Conversion = (ui32SensorData | 0xFFF00000);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80007d2:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e001      	b.n	80007de <ADXL355_Acceleration_Data_Conversion+0x36>

   }
   else{
         i32Conversion = ui32SensorData;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	60fb      	str	r3, [r7, #12]
   }

   return i32Conversion;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f000 fb83 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f88b 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 f95f 	bl	8000abc <MX_GPIO_Init>
  MX_SPI1_Init();
 80007fe:	f000 f8d3 	bl	80009a8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000802:	f000 f90f 	bl	8000a24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RCC->AHB2ENR |= 1 << 0; // Enable clock
 8000806:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <main+0x10c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a3b      	ldr	r2, [pc, #236]	; (80008f8 <main+0x10c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
  GPIOA->MODER |=  1 << 22;
 8000812:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800081c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000820:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~(1 << (22 + 1));
 8000822:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800082c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000830:	6013      	str	r3, [r2, #0]
  GPIOA->OTYPER &= ~(1 << 11);
 8000832:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800083c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000840:	6053      	str	r3, [r2, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8000842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000846:	f000 fbc9 	bl	8000fdc <HAL_Delay>
  ADXL355_Start_Sensor();
 800084a:	f7ff ff9d 	bl	8000788 <ADXL355_Start_Sensor>

  // where we store the measurements
  uint32_t volatile ui32SensorX = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  uint32_t volatile ui32SensorY = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  uint32_t volatile ui32SensorZ = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
	//for(int i = 0; i < 500000; i++);
	// GPIOA->ODR ^= 1 << 4;
	// GPIOB->ODR ^= 1 << 4;
	// set7SegOutput(count);

	HAL_Delay(100);
 800085a:	2064      	movs	r0, #100	; 0x64
 800085c:	f000 fbbe 	bl	8000fdc <HAL_Delay>

    ui32SensorX = SPI_Read(XDATA3, SPI_READ_THREE_REG);
 8000860:	2103      	movs	r1, #3
 8000862:	2008      	movs	r0, #8
 8000864:	f7ff ff0e 	bl	8000684 <SPI_Read>
 8000868:	4603      	mov	r3, r0
 800086a:	60bb      	str	r3, [r7, #8]
    ui32SensorY = SPI_Read(YDATA3, SPI_READ_THREE_REG);
 800086c:	2103      	movs	r1, #3
 800086e:	200b      	movs	r0, #11
 8000870:	f7ff ff08 	bl	8000684 <SPI_Read>
 8000874:	4603      	mov	r3, r0
 8000876:	607b      	str	r3, [r7, #4]
    ui32SensorZ = SPI_Read(ZDATA3, SPI_READ_THREE_REG);
 8000878:	2103      	movs	r1, #3
 800087a:	200e      	movs	r0, #14
 800087c:	f7ff ff02 	bl	8000684 <SPI_Read>
 8000880:	4603      	mov	r3, r0
 8000882:	603b      	str	r3, [r7, #0]

    uint32_t resultX = ADXL355_Acceleration_Data_Conversion(0);
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff ff8f 	bl	80007a8 <ADXL355_Acceleration_Data_Conversion>
 800088a:	4603      	mov	r3, r0
 800088c:	617b      	str	r3, [r7, #20]
    uint32_t resultY = ADXL355_Acceleration_Data_Conversion(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ff8a 	bl	80007a8 <ADXL355_Acceleration_Data_Conversion>
 8000894:	4603      	mov	r3, r0
 8000896:	613b      	str	r3, [r7, #16]
    uint32_t resultZ = ADXL355_Acceleration_Data_Conversion(0);
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff ff85 	bl	80007a8 <ADXL355_Acceleration_Data_Conversion>
 800089e:	4603      	mov	r3, r0
 80008a0:	60fb      	str	r3, [r7, #12]
    printf("------------------\r\n");
 80008a2:	4816      	ldr	r0, [pc, #88]	; (80008fc <main+0x110>)
 80008a4:	f003 fc4c 	bl	8004140 <puts>
    printf("X accel is: %i\r\n", (int)((float)resultX ));
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	ee07 3a90 	vmov	s15, r3
 80008ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008b6:	ee17 1a90 	vmov	r1, s15
 80008ba:	4811      	ldr	r0, [pc, #68]	; (8000900 <main+0x114>)
 80008bc:	f003 fbba 	bl	8004034 <iprintf>
    printf("Y accel is: %i\r\n", (int)((float)resultY ));
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	ee07 3a90 	vmov	s15, r3
 80008c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ce:	ee17 1a90 	vmov	r1, s15
 80008d2:	480c      	ldr	r0, [pc, #48]	; (8000904 <main+0x118>)
 80008d4:	f003 fbae 	bl	8004034 <iprintf>
    printf("Z accel is: %i\r\n", (int)((float)resultZ ));
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	ee07 3a90 	vmov	s15, r3
 80008de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e6:	ee17 1a90 	vmov	r1, s15
 80008ea:	4807      	ldr	r0, [pc, #28]	; (8000908 <main+0x11c>)
 80008ec:	f003 fba2 	bl	8004034 <iprintf>
    printf("------------------");
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <main+0x120>)
 80008f2:	f003 fb9f 	bl	8004034 <iprintf>
  {
 80008f6:	e7b0      	b.n	800085a <main+0x6e>
 80008f8:	40021000 	.word	0x40021000
 80008fc:	08005054 	.word	0x08005054
 8000900:	08005068 	.word	0x08005068
 8000904:	0800507c 	.word	0x0800507c
 8000908:	08005090 	.word	0x08005090
 800090c:	080050a4 	.word	0x080050a4

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	; 0x50
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2238      	movs	r2, #56	; 0x38
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fb80 	bl	8004024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000932:	2000      	movs	r0, #0
 8000934:	f000 fdf2 	bl	800151c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000938:	2302      	movs	r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094a:	2302      	movs	r3, #2
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800094e:	2304      	movs	r3, #4
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000952:	2355      	movs	r3, #85	; 0x55
 8000954:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000956:	2302      	movs	r3, #2
 8000958:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800095a:	2302      	movs	r3, #2
 800095c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095e:	2302      	movs	r3, #2
 8000960:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000962:	f107 0318 	add.w	r3, r7, #24
 8000966:	4618      	mov	r0, r3
 8000968:	f000 fe8c 	bl	8001684 <HAL_RCC_OscConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000972:	f000 f8f5 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000976:	230f      	movs	r3, #15
 8000978:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097a:	2303      	movs	r3, #3
 800097c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2104      	movs	r1, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f990 	bl	8001cb4 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800099a:	f000 f8e1 	bl	8000b60 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <MX_SPI1_Init+0x78>)
 80009b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009de:	2220      	movs	r2, #32
 80009e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009f6:	2207      	movs	r2, #7
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_SPI1_Init+0x74>)
 8000a02:	2208      	movs	r2, #8
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_SPI1_Init+0x74>)
 8000a08:	f001 fd60 	bl	80024cc <HAL_SPI_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a12:	f000 f8a5 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	40013000 	.word	0x40013000

08000a24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <MX_USART2_UART_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a6e:	f002 fc45 	bl	80032fc <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 f872 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a80:	f003 f9dc 	bl	8003e3c <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8a:	f000 f869 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a92:	f003 fa11 	bl	8003eb8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f000 f860 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000aa2:	f003 f992 	bl	8003dca <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 f858 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200000f0 	.word	0x200000f0
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_GPIO_Init+0x78>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <MX_GPIO_Init+0x78>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_GPIO_Init+0x78>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_GPIO_Init+0x78>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <MX_GPIO_Init+0x78>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_GPIO_Init+0x78>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b08:	480b      	ldr	r0, [pc, #44]	; (8000b38 <MX_GPIO_Init+0x7c>)
 8000b0a:	f000 fcef 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_GPIO_Init+0x7c>)
 8000b28:	f000 fb5e 	bl	80011e8 <HAL_GPIO_Init>

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40021000 	.word	0x40021000
 8000b38:	48000400 	.word	0x48000400

08000b3c <__io_putchar>:
* @brief Retargets the C library printf function to the USART.
* @param None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b44:	1d39      	adds	r1, r7, #4
 8000b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <__io_putchar+0x20>)
 8000b4e:	f002 fc25 	bl	800339c <HAL_UART_Transmit>
return ch;
 8000b52:	687b      	ldr	r3, [r7, #4]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200000f0 	.word	0x200000f0

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6593      	str	r3, [r2, #88]	; 0x58
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ba2:	f000 fd5f 	bl	8001664 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_SPI_MspInit+0x7c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d128      	bne.n	8000c28 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_SPI_MspInit+0x80>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bda:	4a16      	ldr	r2, [pc, #88]	; (8000c34 <HAL_SPI_MspInit+0x80>)
 8000bdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000be0:	6613      	str	r3, [r2, #96]	; 0x60
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_SPI_MspInit+0x80>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_SPI_MspInit+0x80>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <HAL_SPI_MspInit+0x80>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_SPI_MspInit+0x80>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c06:	23e0      	movs	r3, #224	; 0xe0
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c16:	2305      	movs	r3, #5
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c24:	f000 fae0 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40013000 	.word	0x40013000
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b09a      	sub	sp, #104	; 0x68
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	2244      	movs	r2, #68	; 0x44
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 f9e3 	bl	8004024 <memset>
  if(huart->Instance==USART2)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a1f      	ldr	r2, [pc, #124]	; (8000ce0 <HAL_UART_MspInit+0xa8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d136      	bne.n	8000cd6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 fa39 	bl	80020ec <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c80:	f7ff ff6e 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c88:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000cb4:	230c      	movs	r3, #12
 8000cb6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f000 fa89 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3768      	adds	r7, #104	; 0x68
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f934 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e00a      	b.n	8000d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d4e:	f3af 8000 	nop.w
 8000d52:	4601      	mov	r1, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <_read+0x12>
	}

return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e009      	b.n	8000d9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fed3 	bl	8000b3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf1      	blt.n	8000d88 <_write+0x12>
	}
	return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_close>:

int _close(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return -1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_isatty>:

int _isatty(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	return 1;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f003 f8c2 	bl	8003fd0 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20008000 	.word	0x20008000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	20000184 	.word	0x20000184
 8000e80:	200001a0 	.word	0x200001a0

08000e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e8a:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <LoopForever+0xe>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <LoopForever+0x16>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eae:	f000 f813 	bl	8000ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f003 f893 	bl	8003fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb6:	f7ff fc99 	bl	80007ec <main>

08000eba <LoopForever>:

LoopForever:
    b LoopForever
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
  ldr   r0, =_estack
 8000ebc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ec8:	080051a0 	.word	0x080051a0
  ldr r2, =_sbss
 8000ecc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ed0:	2000019c 	.word	0x2000019c

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>
	...

08000ed8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f06:	2003      	movs	r0, #3
 8000f08:	f000 f93c 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f000 f80d 	bl	8000f2c <HAL_InitTick>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	e001      	b.n	8000f22 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f1e:	f7ff fe25 	bl	8000b6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f22:	79fb      	ldrb	r3, [r7, #7]

}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_InitTick+0x68>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d022      	beq.n	8000f86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_InitTick+0x6c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <HAL_InitTick+0x68>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f93a 	bl	80011ce <HAL_SYSTICK_Config>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d10f      	bne.n	8000f80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	d809      	bhi.n	8000f7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f66:	2200      	movs	r2, #0
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6e:	f000 f914 	bl	800119a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_InitTick+0x70>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	e007      	b.n	8000f8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e004      	b.n	8000f8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	e001      	b.n	8000f8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_IncTick+0x1c>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_IncTick+0x20>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <HAL_IncTick+0x1c>)
 8000fb0:	6013      	str	r3, [r2, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000188 	.word	0x20000188
 8000fc0:	20000008 	.word	0x20000008

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000188 	.word	0x20000188

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d004      	beq.n	8001000 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_Delay+0x40>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001000:	bf00      	nop
 8001002:	f7ff ffdf 	bl	8000fc4 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	d8f7      	bhi.n	8001002 <HAL_Delay+0x26>
  {
  }
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000008 	.word	0x20000008

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff47 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff5e 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff90 	bl	80010d8 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5f 	bl	8001084 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffb2 	bl	8001140 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011f6:	e15a      	b.n	80014ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 814c 	beq.w	80014a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001224:	2b02      	cmp	r3, #2
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	f003 0201 	and.w	r2, r3, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d123      	bne.n	800131a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	6939      	ldr	r1, [r7, #16]
 8001316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0203 	and.w	r2, r3, #3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80a6 	beq.w	80014a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	4b5b      	ldr	r3, [pc, #364]	; (80014cc <HAL_GPIO_Init+0x2e4>)
 800135e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001360:	4a5a      	ldr	r2, [pc, #360]	; (80014cc <HAL_GPIO_Init+0x2e4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6613      	str	r3, [r2, #96]	; 0x60
 8001368:	4b58      	ldr	r3, [pc, #352]	; (80014cc <HAL_GPIO_Init+0x2e4>)
 800136a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001374:	4a56      	ldr	r2, [pc, #344]	; (80014d0 <HAL_GPIO_Init+0x2e8>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800139e:	d01f      	beq.n	80013e0 <HAL_GPIO_Init+0x1f8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a4c      	ldr	r2, [pc, #304]	; (80014d4 <HAL_GPIO_Init+0x2ec>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d019      	beq.n	80013dc <HAL_GPIO_Init+0x1f4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a4b      	ldr	r2, [pc, #300]	; (80014d8 <HAL_GPIO_Init+0x2f0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d013      	beq.n	80013d8 <HAL_GPIO_Init+0x1f0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <HAL_GPIO_Init+0x2f4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d00d      	beq.n	80013d4 <HAL_GPIO_Init+0x1ec>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a49      	ldr	r2, [pc, #292]	; (80014e0 <HAL_GPIO_Init+0x2f8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d007      	beq.n	80013d0 <HAL_GPIO_Init+0x1e8>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a48      	ldr	r2, [pc, #288]	; (80014e4 <HAL_GPIO_Init+0x2fc>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d101      	bne.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013c8:	2305      	movs	r3, #5
 80013ca:	e00a      	b.n	80013e2 <HAL_GPIO_Init+0x1fa>
 80013cc:	2306      	movs	r3, #6
 80013ce:	e008      	b.n	80013e2 <HAL_GPIO_Init+0x1fa>
 80013d0:	2304      	movs	r3, #4
 80013d2:	e006      	b.n	80013e2 <HAL_GPIO_Init+0x1fa>
 80013d4:	2303      	movs	r3, #3
 80013d6:	e004      	b.n	80013e2 <HAL_GPIO_Init+0x1fa>
 80013d8:	2302      	movs	r3, #2
 80013da:	e002      	b.n	80013e2 <HAL_GPIO_Init+0x1fa>
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <HAL_GPIO_Init+0x1fa>
 80013e0:	2300      	movs	r3, #0
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	f002 0203 	and.w	r2, r2, #3
 80013e8:	0092      	lsls	r2, r2, #2
 80013ea:	4093      	lsls	r3, r2
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f2:	4937      	ldr	r1, [pc, #220]	; (80014d0 <HAL_GPIO_Init+0x2e8>)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3302      	adds	r3, #2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001400:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001424:	4a30      	ldr	r2, [pc, #192]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800142a:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <HAL_GPIO_Init+0x300>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800144e:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_GPIO_Init+0x300>)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a2:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_GPIO_Init+0x300>)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3301      	adds	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f47f ae9d 	bne.w	80011f8 <HAL_GPIO_Init+0x10>
  }
}
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
 80014c2:	371c      	adds	r7, #28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010000 	.word	0x40010000
 80014d4:	48000400 	.word	0x48000400
 80014d8:	48000800 	.word	0x48000800
 80014dc:	48000c00 	.word	0x48000c00
 80014e0:	48001000 	.word	0x48001000
 80014e4:	48001400 	.word	0x48001400
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001508:	e002      	b.n	8001510 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d141      	bne.n	80015ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800152a:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001536:	d131      	bne.n	800159c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001538:	4b47      	ldr	r3, [pc, #284]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800153e:	4a46      	ldr	r2, [pc, #280]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001544:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001550:	4a41      	ldr	r2, [pc, #260]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001556:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001558:	4b40      	ldr	r3, [pc, #256]	; (800165c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2232      	movs	r2, #50	; 0x32
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	4a3f      	ldr	r2, [pc, #252]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0c9b      	lsrs	r3, r3, #18
 800156a:	3301      	adds	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800156e:	e002      	b.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3b01      	subs	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001582:	d102      	bne.n	800158a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f2      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800158a:	4b33      	ldr	r3, [pc, #204]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001596:	d158      	bne.n	800164a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e057      	b.n	800164c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800159c:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015a2:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015ac:	e04d      	b.n	800164a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b4:	d141      	bne.n	800163a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c2:	d131      	bne.n	8001628 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ca:	4a23      	ldr	r2, [pc, #140]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015dc:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2232      	movs	r2, #50	; 0x32
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015f0:	fba2 2303 	umull	r2, r3, r2, r3
 80015f4:	0c9b      	lsrs	r3, r3, #18
 80015f6:	3301      	adds	r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015fa:	e002      	b.n	8001602 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3b01      	subs	r3, #1
 8001600:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160e:	d102      	bne.n	8001616 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f2      	bne.n	80015fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001622:	d112      	bne.n	800164a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e011      	b.n	800164c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001638:	e007      	b.n	800164a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001648:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40007000 	.word	0x40007000
 800165c:	20000000 	.word	0x20000000
 8001660:	431bde83 	.word	0x431bde83

08001664 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800166e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001672:	6093      	str	r3, [r2, #8]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40007000 	.word	0x40007000

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e306      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d075      	beq.n	800178e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a2:	4b97      	ldr	r3, [pc, #604]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016ac:	4b94      	ldr	r3, [pc, #592]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d102      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3e>
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d002      	beq.n	80016c8 <HAL_RCC_OscConfig+0x44>
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d10b      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	4b8d      	ldr	r3, [pc, #564]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d05b      	beq.n	800178c <HAL_RCC_OscConfig+0x108>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d157      	bne.n	800178c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e2e1      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x74>
 80016ea:	4b85      	ldr	r3, [pc, #532]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a84      	ldr	r2, [pc, #528]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e01d      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b7f      	ldr	r3, [pc, #508]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7e      	ldr	r2, [pc, #504]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b7c      	ldr	r3, [pc, #496]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7b      	ldr	r2, [pc, #492]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 800171c:	4b78      	ldr	r3, [pc, #480]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a77      	ldr	r2, [pc, #476]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b75      	ldr	r3, [pc, #468]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a74      	ldr	r2, [pc, #464]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fc42 	bl	8000fc4 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fc3e 	bl	8000fc4 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e2a6      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001756:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0xc0>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fc2e 	bl	8000fc4 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fc2a 	bl	8000fc4 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e292      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800177e:	4b60      	ldr	r3, [pc, #384]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0xe8>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d075      	beq.n	8001886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179a:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a4:	4b56      	ldr	r3, [pc, #344]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	d102      	bne.n	80017ba <HAL_RCC_OscConfig+0x136>
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d002      	beq.n	80017c0 <HAL_RCC_OscConfig+0x13c>
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d11f      	bne.n	8001800 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c0:	4b4f      	ldr	r3, [pc, #316]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_OscConfig+0x154>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e265      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b49      	ldr	r3, [pc, #292]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	061b      	lsls	r3, r3, #24
 80017e6:	4946      	ldr	r1, [pc, #280]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017ec:	4b45      	ldr	r3, [pc, #276]	; (8001904 <HAL_RCC_OscConfig+0x280>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fb9b 	bl	8000f2c <HAL_InitTick>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d043      	beq.n	8001884 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e251      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d023      	beq.n	8001850 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a3c      	ldr	r2, [pc, #240]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fbd6 	bl	8000fc4 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181c:	f7ff fbd2 	bl	8000fc4 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e23a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	061b      	lsls	r3, r3, #24
 8001848:	492d      	ldr	r1, [pc, #180]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
 800184e:	e01a      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a2a      	ldr	r2, [pc, #168]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 8001856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fbb2 	bl	8000fc4 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fbae 	bl	8000fc4 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e216      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1e0>
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001884:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d041      	beq.n	8001916 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d01c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 800189c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fb8b 	bl	8000fc4 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff fb87 	bl	8000fc4 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1ef      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80018c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0ef      	beq.n	80018b2 <HAL_RCC_OscConfig+0x22e>
 80018d2:	e020      	b.n	8001916 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff fb6e 	bl	8000fc4 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ea:	e00d      	b.n	8001908 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb6a 	bl	8000fc4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d906      	bls.n	8001908 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1d2      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001908:	4b8c      	ldr	r3, [pc, #560]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 800190a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ea      	bne.n	80018ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80a6 	beq.w	8001a70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001928:	4b84      	ldr	r3, [pc, #528]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_OscConfig+0x2b4>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x2b6>
 8001938:	2300      	movs	r3, #0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00d      	beq.n	800195a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b7f      	ldr	r3, [pc, #508]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a7e      	ldr	r2, [pc, #504]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
 800194a:	4b7c      	ldr	r3, [pc, #496]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195a:	4b79      	ldr	r3, [pc, #484]	; (8001b40 <HAL_RCC_OscConfig+0x4bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001966:	4b76      	ldr	r3, [pc, #472]	; (8001b40 <HAL_RCC_OscConfig+0x4bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a75      	ldr	r2, [pc, #468]	; (8001b40 <HAL_RCC_OscConfig+0x4bc>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff fb27 	bl	8000fc4 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff fb23 	bl	8000fc4 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e18b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198c:	4b6c      	ldr	r3, [pc, #432]	; (8001b40 <HAL_RCC_OscConfig+0x4bc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d108      	bne.n	80019b2 <HAL_RCC_OscConfig+0x32e>
 80019a0:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	4a65      	ldr	r2, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b0:	e024      	b.n	80019fc <HAL_RCC_OscConfig+0x378>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	d110      	bne.n	80019dc <HAL_RCC_OscConfig+0x358>
 80019ba:	4b60      	ldr	r3, [pc, #384]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 80019bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c0:	4a5e      	ldr	r2, [pc, #376]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ca:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	4a5a      	ldr	r2, [pc, #360]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019da:	e00f      	b.n	80019fc <HAL_RCC_OscConfig+0x378>
 80019dc:	4b57      	ldr	r3, [pc, #348]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e2:	4a56      	ldr	r2, [pc, #344]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ec:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 80019ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f2:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 80019f4:	f023 0304 	bic.w	r3, r3, #4
 80019f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d016      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff fade 	bl	8000fc4 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fada 	bl	8000fc4 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e140      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a22:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ed      	beq.n	8001a0c <HAL_RCC_OscConfig+0x388>
 8001a30:	e015      	b.n	8001a5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a32:	f7ff fac7 	bl	8000fc4 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff fac3 	bl	8000fc4 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e129      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a50:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ed      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a5e:	7ffb      	ldrb	r3, [r7, #31]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d105      	bne.n	8001a70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	4a34      	ldr	r2, [pc, #208]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d03c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01c      	beq.n	8001abe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a8a:	4a2c      	ldr	r2, [pc, #176]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff fa96 	bl	8000fc4 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a9c:	f7ff fa92 	bl	8000fc4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0fa      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0ef      	beq.n	8001a9c <HAL_RCC_OscConfig+0x418>
 8001abc:	e01b      	b.n	8001af6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7ff fa79 	bl	8000fc4 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ad6:	f7ff fa75 	bl	8000fc4 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0dd      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ef      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80d1 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	f000 808b 	beq.w	8001c24 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d15e      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_RCC_OscConfig+0x4b8>)
 8001b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fa4f 	bl	8000fc4 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b28:	e00c      	b.n	8001b44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff fa4b 	bl	8000fc4 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d905      	bls.n	8001b44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0b3      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ec      	bne.n	8001b2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b50:	4b56      	ldr	r3, [pc, #344]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	4b56      	ldr	r3, [pc, #344]	; (8001cb0 <HAL_RCC_OscConfig+0x62c>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6a11      	ldr	r1, [r2, #32]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b60:	3a01      	subs	r2, #1
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001b6a:	0212      	lsls	r2, r2, #8
 8001b6c:	4311      	orrs	r1, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b72:	0852      	lsrs	r2, r2, #1
 8001b74:	3a01      	subs	r2, #1
 8001b76:	0552      	lsls	r2, r2, #21
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b7e:	0852      	lsrs	r2, r2, #1
 8001b80:	3a01      	subs	r2, #1
 8001b82:	0652      	lsls	r2, r2, #25
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b8a:	06d2      	lsls	r2, r2, #27
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	4947      	ldr	r1, [pc, #284]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b94:	4b45      	ldr	r3, [pc, #276]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a44      	ldr	r2, [pc, #272]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba0:	4b42      	ldr	r3, [pc, #264]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4a41      	ldr	r2, [pc, #260]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001baa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fa0a 	bl	8000fc4 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff fa06 	bl	8000fc4 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e06e      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x530>
 8001bd2:	e066      	b.n	8001ca2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd4:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a34      	ldr	r2, [pc, #208]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a31      	ldr	r2, [pc, #196]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001be6:	f023 0303 	bic.w	r3, r3, #3
 8001bea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001bf2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f9e2 	bl	8000fc4 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff f9de 	bl	8000fc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e046      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x580>
 8001c22:	e03e      	b.n	8001ca2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e039      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d12c      	bne.n	8001c9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d123      	bne.n	8001c9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d11b      	bne.n	8001c9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d113      	bne.n	8001c9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	085b      	lsrs	r3, r3, #1
 8001c82:	3b01      	subs	r3, #1
 8001c84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	085b      	lsrs	r3, r3, #1
 8001c96:	3b01      	subs	r3, #1
 8001c98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	019f800c 	.word	0x019f800c

08001cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e11e      	b.n	8001f0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b91      	ldr	r3, [pc, #580]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d910      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b8e      	ldr	r3, [pc, #568]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 020f 	bic.w	r2, r3, #15
 8001ce2:	498c      	ldr	r1, [pc, #560]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b8a      	ldr	r3, [pc, #552]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e106      	b.n	8001f0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d073      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d129      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d10:	4b81      	ldr	r3, [pc, #516]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0f4      	b.n	8001f0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d20:	f000 f99e 	bl	8002060 <RCC_GetSysClockFreqFromPLLSource>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4a7c      	ldr	r2, [pc, #496]	; (8001f1c <HAL_RCC_ClockConfig+0x268>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d93f      	bls.n	8001dae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d2e:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d033      	beq.n	8001dae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d12f      	bne.n	8001dae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d4e:	4b72      	ldr	r3, [pc, #456]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d56:	4a70      	ldr	r2, [pc, #448]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e024      	b.n	8001dae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6c:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0c6      	b.n	8001f0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7c:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0be      	b.n	8001f0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d8c:	f000 f8ce 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4a61      	ldr	r2, [pc, #388]	; (8001f1c <HAL_RCC_ClockConfig+0x268>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d909      	bls.n	8001dae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001da2:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dae:	4b5a      	ldr	r3, [pc, #360]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f023 0203 	bic.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4957      	ldr	r1, [pc, #348]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f900 	bl	8000fc4 <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc8:	f7ff f8fc 	bl	8000fc4 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e095      	b.n	8001f0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 020c 	and.w	r2, r3, #12
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1eb      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d023      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e08:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4a42      	ldr	r2, [pc, #264]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001e0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e20:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e28:	4a3b      	ldr	r2, [pc, #236]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001e2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4936      	ldr	r1, [pc, #216]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b80      	cmp	r3, #128	; 0x80
 8001e48:	d105      	bne.n	8001e56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e4a:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	4a32      	ldr	r2, [pc, #200]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001e50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d21d      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e64:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 020f 	bic.w	r2, r3, #15
 8001e6c:	4929      	ldr	r1, [pc, #164]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e74:	f7ff f8a6 	bl	8000fc4 <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7ff f8a2 	bl	8000fc4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e03b      	b.n	8001f0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1ed      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4917      	ldr	r1, [pc, #92]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490f      	ldr	r1, [pc, #60]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ede:	f000 f825 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	490c      	ldr	r1, [pc, #48]	; (8001f20 <HAL_RCC_ClockConfig+0x26c>)
 8001ef0:	5ccb      	ldrb	r3, [r1, r3]
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <HAL_RCC_ClockConfig+0x270>)
 8001efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_RCC_ClockConfig+0x274>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f812 	bl	8000f2c <HAL_InitTick>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	04c4b400 	.word	0x04c4b400
 8001f20:	080050b8 	.word	0x080050b8
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000004 	.word	0x20000004

08001f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f32:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d102      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	e047      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f50:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	e03e      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f56:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b0c      	cmp	r3, #12
 8001f60:	d136      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3301      	adds	r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f80:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8a:	68d2      	ldr	r2, [r2, #12]
 8001f8c:	0a12      	lsrs	r2, r2, #8
 8001f8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	617b      	str	r3, [r7, #20]
      break;
 8001f98:	e00c      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f9a:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa4:	68d2      	ldr	r2, [r2, #12]
 8001fa6:	0a12      	lsrs	r2, r2, #8
 8001fa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
      break;
 8001fb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0e5b      	lsrs	r3, r3, #25
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e001      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fd4:	693b      	ldr	r3, [r7, #16]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	00f42400 	.word	0x00f42400
 8001fec:	007a1200 	.word	0x007a1200

08001ff0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000000 	.word	0x20000000

08002008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800200c:	f7ff fff0 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4904      	ldr	r1, [pc, #16]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800201e:	5ccb      	ldrb	r3, [r1, r3]
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	080050c8 	.word	0x080050c8

08002034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002038:	f7ff ffda 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0adb      	lsrs	r3, r3, #11
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4904      	ldr	r1, [pc, #16]	; (800205c <HAL_RCC_GetPCLK2Freq+0x28>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	080050c8 	.word	0x080050c8

08002060 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3301      	adds	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d10c      	bne.n	800209e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800208e:	68d2      	ldr	r2, [r2, #12]
 8002090:	0a12      	lsrs	r2, r2, #8
 8002092:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
    break;
 800209c:	e00c      	b.n	80020b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020a8:	68d2      	ldr	r2, [r2, #12]
 80020aa:	0a12      	lsrs	r2, r2, #8
 80020ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    break;
 80020b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0e5b      	lsrs	r3, r3, #25
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	3301      	adds	r3, #1
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020d2:	687b      	ldr	r3, [r7, #4]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	371c      	adds	r7, #28
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40021000 	.word	0x40021000
 80020e4:	007a1200 	.word	0x007a1200
 80020e8:	00f42400 	.word	0x00f42400

080020ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020f4:	2300      	movs	r3, #0
 80020f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020f8:	2300      	movs	r3, #0
 80020fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8098 	beq.w	800223a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b43      	ldr	r3, [pc, #268]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b40      	ldr	r3, [pc, #256]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	4a3f      	ldr	r2, [pc, #252]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6593      	str	r3, [r2, #88]	; 0x58
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002136:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a39      	ldr	r2, [pc, #228]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002140:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002142:	f7fe ff3f 	bl	8000fc4 <HAL_GetTick>
 8002146:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002148:	e009      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214a:	f7fe ff3b 	bl	8000fc4 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d902      	bls.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	74fb      	strb	r3, [r7, #19]
        break;
 800215c:	e005      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0ef      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d159      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002170:	4b2a      	ldr	r3, [pc, #168]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01e      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	d019      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002196:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	4a1f      	ldr	r2, [pc, #124]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021a8:	4b1c      	ldr	r3, [pc, #112]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	4a1b      	ldr	r2, [pc, #108]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021b8:	4a18      	ldr	r2, [pc, #96]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d016      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7fe fefb 	bl	8000fc4 <HAL_GetTick>
 80021ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d0:	e00b      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7fe fef7 	bl	8000fc4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d902      	bls.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	74fb      	strb	r3, [r7, #19]
            break;
 80021e8:	e006      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ec      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10b      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	4903      	ldr	r1, [pc, #12]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002214:	e008      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	74bb      	strb	r3, [r7, #18]
 800221a:	e005      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002228:	7c7b      	ldrb	r3, [r7, #17]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d105      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4ba6      	ldr	r3, [pc, #664]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4aa5      	ldr	r2, [pc, #660]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002246:	4ba0      	ldr	r3, [pc, #640]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224c:	f023 0203 	bic.w	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	499c      	ldr	r1, [pc, #624]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002268:	4b97      	ldr	r3, [pc, #604]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f023 020c 	bic.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4994      	ldr	r1, [pc, #592]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800228a:	4b8f      	ldr	r3, [pc, #572]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	498b      	ldr	r1, [pc, #556]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ac:	4b86      	ldr	r3, [pc, #536]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	4983      	ldr	r1, [pc, #524]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ce:	4b7e      	ldr	r3, [pc, #504]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	497a      	ldr	r1, [pc, #488]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022f0:	4b75      	ldr	r3, [pc, #468]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	4972      	ldr	r1, [pc, #456]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002312:	4b6d      	ldr	r3, [pc, #436]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002318:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	4969      	ldr	r1, [pc, #420]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002334:	4b64      	ldr	r3, [pc, #400]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4961      	ldr	r1, [pc, #388]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002356:	4b5c      	ldr	r3, [pc, #368]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	4958      	ldr	r1, [pc, #352]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002374:	2b00      	cmp	r3, #0
 8002376:	d015      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	4950      	ldr	r1, [pc, #320]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002396:	d105      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002398:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a4a      	ldr	r2, [pc, #296]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d015      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023b0:	4b45      	ldr	r3, [pc, #276]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	4942      	ldr	r1, [pc, #264]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ce:	d105      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d0:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a3c      	ldr	r2, [pc, #240]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d015      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023e8:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4934      	ldr	r1, [pc, #208]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002406:	d105      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a2e      	ldr	r2, [pc, #184]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002412:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d015      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002420:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	4926      	ldr	r1, [pc, #152]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800243e:	d105      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a20      	ldr	r2, [pc, #128]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800244a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d015      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	4918      	ldr	r1, [pc, #96]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002476:	d105      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002482:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d015      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	490a      	ldr	r1, [pc, #40]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ae:	d105      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e09d      	b.n	800261a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d108      	bne.n	80024f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ee:	d009      	beq.n	8002504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
 80024f6:	e005      	b.n	8002504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fb48 	bl	8000bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800253a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002544:	d902      	bls.n	800254c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e002      	b.n	8002552 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800254c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002550:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800255a:	d007      	beq.n	800256c <HAL_SPI_Init+0xa0>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002564:	d002      	beq.n	800256c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	ea42 0103 	orr.w	r1, r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	0c1b      	lsrs	r3, r3, #16
 80025c8:	f003 0204 	and.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80025e8:	ea42 0103 	orr.w	r1, r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002608:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b088      	sub	sp, #32
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	4613      	mov	r3, r2
 8002630:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_SPI_Transmit+0x22>
 8002640:	2302      	movs	r3, #2
 8002642:	e158      	b.n	80028f6 <HAL_SPI_Transmit+0x2d4>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800264c:	f7fe fcba 	bl	8000fc4 <HAL_GetTick>
 8002650:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d002      	beq.n	8002668 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002666:	e13d      	b.n	80028e4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_SPI_Transmit+0x52>
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002678:	e134      	b.n	80028e4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2203      	movs	r2, #3
 800267e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c4:	d10f      	bne.n	80026e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d007      	beq.n	8002704 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002702:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800270c:	d94b      	bls.n	80027a6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_SPI_Transmit+0xfa>
 8002716:	8afb      	ldrh	r3, [r7, #22]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d13e      	bne.n	800279a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272c:	1c9a      	adds	r2, r3, #2
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002740:	e02b      	b.n	800279a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b02      	cmp	r3, #2
 800274e:	d112      	bne.n	8002776 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	1c9a      	adds	r2, r3, #2
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002774:	e011      	b.n	800279a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002776:	f7fe fc25 	bl	8000fc4 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d803      	bhi.n	800278e <HAL_SPI_Transmit+0x16c>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d102      	bne.n	8002794 <HAL_SPI_Transmit+0x172>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002798:	e0a4      	b.n	80028e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ce      	bne.n	8002742 <HAL_SPI_Transmit+0x120>
 80027a4:	e07c      	b.n	80028a0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_SPI_Transmit+0x192>
 80027ae:	8afb      	ldrh	r3, [r7, #22]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d170      	bne.n	8002896 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d912      	bls.n	80027e4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	881a      	ldrh	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	1c9a      	adds	r2, r3, #2
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b02      	subs	r3, #2
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027e2:	e058      	b.n	8002896 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	330c      	adds	r3, #12
 80027ee:	7812      	ldrb	r2, [r2, #0]
 80027f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800280a:	e044      	b.n	8002896 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b02      	cmp	r3, #2
 8002818:	d12b      	bne.n	8002872 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d912      	bls.n	800284a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	1c9a      	adds	r2, r3, #2
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b02      	subs	r3, #2
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002848:	e025      	b.n	8002896 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002870:	e011      	b.n	8002896 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002872:	f7fe fba7 	bl	8000fc4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d803      	bhi.n	800288a <HAL_SPI_Transmit+0x268>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d102      	bne.n	8002890 <HAL_SPI_Transmit+0x26e>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002894:	e026      	b.n	80028e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1b5      	bne.n	800280c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	6839      	ldr	r1, [r7, #0]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fce3 	bl	8003270 <SPI_EndRxTxTransaction>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10a      	bne.n	80028d4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	77fb      	strb	r3, [r7, #31]
 80028e0:	e000      	b.n	80028e4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80028e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80028f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b088      	sub	sp, #32
 8002902:	af02      	add	r7, sp, #8
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291a:	d112      	bne.n	8002942 <HAL_SPI_Receive+0x44>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10e      	bne.n	8002942 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2204      	movs	r2, #4
 8002928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800292c:	88fa      	ldrh	r2, [r7, #6]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f910 	bl	8002b5e <HAL_SPI_TransmitReceive>
 800293e:	4603      	mov	r3, r0
 8002940:	e109      	b.n	8002b56 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_SPI_Receive+0x52>
 800294c:	2302      	movs	r3, #2
 800294e:	e102      	b.n	8002b56 <HAL_SPI_Receive+0x258>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002958:	f7fe fb34 	bl	8000fc4 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d002      	beq.n	8002970 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800296a:	2302      	movs	r3, #2
 800296c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800296e:	e0e9      	b.n	8002b44 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_SPI_Receive+0x7e>
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002980:	e0e0      	b.n	8002b44 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2204      	movs	r2, #4
 8002986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	88fa      	ldrh	r2, [r7, #6]
 80029a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029cc:	d908      	bls.n	80029e0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	e007      	b.n	80029f0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029ee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f8:	d10f      	bne.n	8002a1a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d007      	beq.n	8002a38 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a40:	d867      	bhi.n	8002b12 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a42:	e030      	b.n	8002aa6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d117      	bne.n	8002a82 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f103 020c 	add.w	r2, r3, #12
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	7812      	ldrb	r2, [r2, #0]
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002a80:	e011      	b.n	8002aa6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a82:	f7fe fa9f 	bl	8000fc4 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d803      	bhi.n	8002a9a <HAL_SPI_Receive+0x19c>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d102      	bne.n	8002aa0 <HAL_SPI_Receive+0x1a2>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002aa4:	e04e      	b.n	8002b44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1c8      	bne.n	8002a44 <HAL_SPI_Receive+0x146>
 8002ab2:	e034      	b.n	8002b1e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d115      	bne.n	8002aee <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	b292      	uxth	r2, r2
 8002ace:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	1c9a      	adds	r2, r3, #2
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002aec:	e011      	b.n	8002b12 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aee:	f7fe fa69 	bl	8000fc4 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d803      	bhi.n	8002b06 <HAL_SPI_Receive+0x208>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d102      	bne.n	8002b0c <HAL_SPI_Receive+0x20e>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b10:	e018      	b.n	8002b44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ca      	bne.n	8002ab4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	6839      	ldr	r1, [r7, #0]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fb4c 	bl	80031c0 <SPI_EndRxTransaction>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	75fb      	strb	r3, [r7, #23]
 8002b40:	e000      	b.n	8002b44 <HAL_SPI_Receive+0x246>
  }

error :
 8002b42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b08a      	sub	sp, #40	; 0x28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_SPI_TransmitReceive+0x26>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e1fb      	b.n	8002f7c <HAL_SPI_TransmitReceive+0x41e>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b8c:	f7fe fa1a 	bl	8000fc4 <HAL_GetTick>
 8002b90:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b98:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002ba0:	887b      	ldrh	r3, [r7, #2]
 8002ba2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002ba4:	887b      	ldrh	r3, [r7, #2]
 8002ba6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ba8:	7efb      	ldrb	r3, [r7, #27]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d00e      	beq.n	8002bcc <HAL_SPI_TransmitReceive+0x6e>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb4:	d106      	bne.n	8002bc4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d102      	bne.n	8002bc4 <HAL_SPI_TransmitReceive+0x66>
 8002bbe:	7efb      	ldrb	r3, [r7, #27]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d003      	beq.n	8002bcc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002bca:	e1cd      	b.n	8002f68 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_SPI_TransmitReceive+0x80>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_SPI_TransmitReceive+0x80>
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002be4:	e1c0      	b.n	8002f68 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d003      	beq.n	8002bfa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2205      	movs	r2, #5
 8002bf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	887a      	ldrh	r2, [r7, #2]
 8002c0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	887a      	ldrh	r2, [r7, #2]
 8002c12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	887a      	ldrh	r2, [r7, #2]
 8002c26:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c3c:	d802      	bhi.n	8002c44 <HAL_SPI_TransmitReceive+0xe6>
 8002c3e:	8a3b      	ldrh	r3, [r7, #16]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d908      	bls.n	8002c56 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	e007      	b.n	8002c66 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c64:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d007      	beq.n	8002c84 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c8c:	d97c      	bls.n	8002d88 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_SPI_TransmitReceive+0x13e>
 8002c96:	8a7b      	ldrh	r3, [r7, #18]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d169      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	881a      	ldrh	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	1c9a      	adds	r2, r3, #2
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cc0:	e056      	b.n	8002d70 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d11b      	bne.n	8002d08 <HAL_SPI_TransmitReceive+0x1aa>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d016      	beq.n	8002d08 <HAL_SPI_TransmitReceive+0x1aa>
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d113      	bne.n	8002d08 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	881a      	ldrh	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	1c9a      	adds	r2, r3, #2
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d11c      	bne.n	8002d50 <HAL_SPI_TransmitReceive+0x1f2>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	b292      	uxth	r2, r2
 8002d2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	1c9a      	adds	r2, r3, #2
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d50:	f7fe f938 	bl	8000fc4 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d807      	bhi.n	8002d70 <HAL_SPI_TransmitReceive+0x212>
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d66:	d003      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002d6e:	e0fb      	b.n	8002f68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1a3      	bne.n	8002cc2 <HAL_SPI_TransmitReceive+0x164>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d19d      	bne.n	8002cc2 <HAL_SPI_TransmitReceive+0x164>
 8002d86:	e0df      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_SPI_TransmitReceive+0x23a>
 8002d90:	8a7b      	ldrh	r3, [r7, #18]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	f040 80cb 	bne.w	8002f2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d912      	bls.n	8002dc8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	881a      	ldrh	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	1c9a      	adds	r2, r3, #2
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b02      	subs	r3, #2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dc6:	e0b2      	b.n	8002f2e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dee:	e09e      	b.n	8002f2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d134      	bne.n	8002e68 <HAL_SPI_TransmitReceive+0x30a>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d02f      	beq.n	8002e68 <HAL_SPI_TransmitReceive+0x30a>
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d12c      	bne.n	8002e68 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d912      	bls.n	8002e3e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	881a      	ldrh	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	1c9a      	adds	r2, r3, #2
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b02      	subs	r3, #2
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e3c:	e012      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	330c      	adds	r3, #12
 8002e48:	7812      	ldrb	r2, [r2, #0]
 8002e4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d148      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0x3aa>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d042      	beq.n	8002f08 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d923      	bls.n	8002ed6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	b292      	uxth	r2, r2
 8002e9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	1c9a      	adds	r2, r3, #2
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b02      	subs	r3, #2
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d81f      	bhi.n	8002f04 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	e016      	b.n	8002f04 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f103 020c 	add.w	r2, r3, #12
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	7812      	ldrb	r2, [r2, #0]
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f04:	2301      	movs	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f08:	f7fe f85c 	bl	8000fc4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d803      	bhi.n	8002f20 <HAL_SPI_TransmitReceive+0x3c2>
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d102      	bne.n	8002f26 <HAL_SPI_TransmitReceive+0x3c8>
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f2c:	e01c      	b.n	8002f68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f47f af5b 	bne.w	8002df0 <HAL_SPI_TransmitReceive+0x292>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f47f af54 	bne.w	8002df0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f98f 	bl	8003270 <SPI_EndRxTxTransaction>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	661a      	str	r2, [r3, #96]	; 0x60
 8002f64:	e000      	b.n	8002f68 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002f66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3728      	adds	r7, #40	; 0x28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f94:	f7fe f816 	bl	8000fc4 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fa4:	f7fe f80e 	bl	8000fc4 <HAL_GetTick>
 8002fa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002faa:	4b39      	ldr	r3, [pc, #228]	; (8003090 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	015b      	lsls	r3, r3, #5
 8002fb0:	0d1b      	lsrs	r3, r3, #20
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fba:	e054      	b.n	8003066 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc2:	d050      	beq.n	8003066 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fc4:	f7fd fffe 	bl	8000fc4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d902      	bls.n	8002fda <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d13d      	bne.n	8003056 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff2:	d111      	bne.n	8003018 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ffc:	d004      	beq.n	8003008 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003006:	d107      	bne.n	8003018 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003020:	d10f      	bne.n	8003042 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e017      	b.n	8003086 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3b01      	subs	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	429a      	cmp	r2, r3
 8003082:	d19b      	bne.n	8002fbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000000 	.word	0x20000000

08003094 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030a6:	f7fd ff8d 	bl	8000fc4 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	4413      	add	r3, r2
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80030b6:	f7fd ff85 	bl	8000fc4 <HAL_GetTick>
 80030ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030c4:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00da      	lsls	r2, r3, #3
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	0d1b      	lsrs	r3, r3, #20
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030dc:	e060      	b.n	80031a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030e4:	d107      	bne.n	80030f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d050      	beq.n	80031a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030fe:	f7fd ff61 	bl	8000fc4 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310a:	429a      	cmp	r2, r3
 800310c:	d902      	bls.n	8003114 <SPI_WaitFifoStateUntilTimeout+0x80>
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	2b00      	cmp	r3, #0
 8003112:	d13d      	bne.n	8003190 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003122:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800312c:	d111      	bne.n	8003152 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003136:	d004      	beq.n	8003142 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003140:	d107      	bne.n	8003152 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003150:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315a:	d10f      	bne.n	800317c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800317a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e010      	b.n	80031b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	3b01      	subs	r3, #1
 800319e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d196      	bne.n	80030de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3728      	adds	r7, #40	; 0x28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000000 	.word	0x20000000

080031c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031d4:	d111      	bne.n	80031fa <SPI_EndRxTransaction+0x3a>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031de:	d004      	beq.n	80031ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d107      	bne.n	80031fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2200      	movs	r2, #0
 8003202:	2180      	movs	r1, #128	; 0x80
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7ff febd 	bl	8002f84 <SPI_WaitFlagStateUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e023      	b.n	8003268 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003228:	d11d      	bne.n	8003266 <SPI_EndRxTransaction+0xa6>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003232:	d004      	beq.n	800323e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d113      	bne.n	8003266 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2200      	movs	r2, #0
 8003246:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff ff22 	bl	8003094 <SPI_WaitFifoStateUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e000      	b.n	8003268 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2200      	movs	r2, #0
 8003284:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f7ff ff03 	bl	8003094 <SPI_WaitFifoStateUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e027      	b.n	80032f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2200      	movs	r2, #0
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff fe68 	bl	8002f84 <SPI_WaitFlagStateUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032be:	f043 0220 	orr.w	r2, r3, #32
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e014      	b.n	80032f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff fedc 	bl	8003094 <SPI_WaitFifoStateUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e000      	b.n	80032f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e042      	b.n	8003394 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003314:	2b00      	cmp	r3, #0
 8003316:	d106      	bne.n	8003326 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7fd fc89 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2224      	movs	r2, #36	; 0x24
 800332a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8c2 	bl	80034c8 <UART_SetConfig>
 8003344:	4603      	mov	r3, r0
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e022      	b.n	8003394 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fb82 	bl	8003a60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800336a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800337a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fc09 	bl	8003ba4 <UART_CheckIdleState>
 8003392:	4603      	mov	r3, r0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	f040 8083 	bne.w	80034be <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_UART_Transmit+0x28>
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e07b      	b.n	80034c0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Transmit+0x3a>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e074      	b.n	80034c0 <HAL_UART_Transmit+0x124>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2221      	movs	r2, #33	; 0x21
 80033ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ee:	f7fd fde9 	bl	8000fc4 <HAL_GetTick>
 80033f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340c:	d108      	bne.n	8003420 <HAL_UART_Transmit+0x84>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e003      	b.n	8003428 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003430:	e02c      	b.n	800348c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fbfc 	bl	8003c3a <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e039      	b.n	80034c0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	3302      	adds	r3, #2
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	e007      	b.n	800347a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	3301      	adds	r3, #1
 8003478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1cc      	bne.n	8003432 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2200      	movs	r2, #0
 80034a0:	2140      	movs	r1, #64	; 0x40
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fbc9 	bl	8003c3a <UART_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e006      	b.n	80034c0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80034be:	2302      	movs	r3, #2
  }
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034cc:	b08c      	sub	sp, #48	; 0x30
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4bab      	ldr	r3, [pc, #684]	; (80037a4 <UART_SetConfig+0x2dc>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003500:	430b      	orrs	r3, r1
 8003502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4aa0      	ldr	r2, [pc, #640]	; (80037a8 <UART_SetConfig+0x2e0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003530:	4313      	orrs	r3, r2
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800353e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003548:	430b      	orrs	r3, r1
 800354a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	f023 010f 	bic.w	r1, r3, #15
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a91      	ldr	r2, [pc, #580]	; (80037ac <UART_SetConfig+0x2e4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d125      	bne.n	80035b8 <UART_SetConfig+0xf0>
 800356c:	4b90      	ldr	r3, [pc, #576]	; (80037b0 <UART_SetConfig+0x2e8>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b03      	cmp	r3, #3
 8003578:	d81a      	bhi.n	80035b0 <UART_SetConfig+0xe8>
 800357a:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <UART_SetConfig+0xb8>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	08003591 	.word	0x08003591
 8003584:	080035a1 	.word	0x080035a1
 8003588:	08003599 	.word	0x08003599
 800358c:	080035a9 	.word	0x080035a9
 8003590:	2301      	movs	r3, #1
 8003592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003596:	e0d6      	b.n	8003746 <UART_SetConfig+0x27e>
 8003598:	2302      	movs	r3, #2
 800359a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800359e:	e0d2      	b.n	8003746 <UART_SetConfig+0x27e>
 80035a0:	2304      	movs	r3, #4
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a6:	e0ce      	b.n	8003746 <UART_SetConfig+0x27e>
 80035a8:	2308      	movs	r3, #8
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ae:	e0ca      	b.n	8003746 <UART_SetConfig+0x27e>
 80035b0:	2310      	movs	r3, #16
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035b6:	e0c6      	b.n	8003746 <UART_SetConfig+0x27e>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a7d      	ldr	r2, [pc, #500]	; (80037b4 <UART_SetConfig+0x2ec>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d138      	bne.n	8003634 <UART_SetConfig+0x16c>
 80035c2:	4b7b      	ldr	r3, [pc, #492]	; (80037b0 <UART_SetConfig+0x2e8>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	d82d      	bhi.n	800362c <UART_SetConfig+0x164>
 80035d0:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <UART_SetConfig+0x110>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	0800360d 	.word	0x0800360d
 80035dc:	0800362d 	.word	0x0800362d
 80035e0:	0800362d 	.word	0x0800362d
 80035e4:	0800362d 	.word	0x0800362d
 80035e8:	0800361d 	.word	0x0800361d
 80035ec:	0800362d 	.word	0x0800362d
 80035f0:	0800362d 	.word	0x0800362d
 80035f4:	0800362d 	.word	0x0800362d
 80035f8:	08003615 	.word	0x08003615
 80035fc:	0800362d 	.word	0x0800362d
 8003600:	0800362d 	.word	0x0800362d
 8003604:	0800362d 	.word	0x0800362d
 8003608:	08003625 	.word	0x08003625
 800360c:	2300      	movs	r3, #0
 800360e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003612:	e098      	b.n	8003746 <UART_SetConfig+0x27e>
 8003614:	2302      	movs	r3, #2
 8003616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361a:	e094      	b.n	8003746 <UART_SetConfig+0x27e>
 800361c:	2304      	movs	r3, #4
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003622:	e090      	b.n	8003746 <UART_SetConfig+0x27e>
 8003624:	2308      	movs	r3, #8
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362a:	e08c      	b.n	8003746 <UART_SetConfig+0x27e>
 800362c:	2310      	movs	r3, #16
 800362e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003632:	e088      	b.n	8003746 <UART_SetConfig+0x27e>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a5f      	ldr	r2, [pc, #380]	; (80037b8 <UART_SetConfig+0x2f0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d125      	bne.n	800368a <UART_SetConfig+0x1c2>
 800363e:	4b5c      	ldr	r3, [pc, #368]	; (80037b0 <UART_SetConfig+0x2e8>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003648:	2b30      	cmp	r3, #48	; 0x30
 800364a:	d016      	beq.n	800367a <UART_SetConfig+0x1b2>
 800364c:	2b30      	cmp	r3, #48	; 0x30
 800364e:	d818      	bhi.n	8003682 <UART_SetConfig+0x1ba>
 8003650:	2b20      	cmp	r3, #32
 8003652:	d00a      	beq.n	800366a <UART_SetConfig+0x1a2>
 8003654:	2b20      	cmp	r3, #32
 8003656:	d814      	bhi.n	8003682 <UART_SetConfig+0x1ba>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <UART_SetConfig+0x19a>
 800365c:	2b10      	cmp	r3, #16
 800365e:	d008      	beq.n	8003672 <UART_SetConfig+0x1aa>
 8003660:	e00f      	b.n	8003682 <UART_SetConfig+0x1ba>
 8003662:	2300      	movs	r3, #0
 8003664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003668:	e06d      	b.n	8003746 <UART_SetConfig+0x27e>
 800366a:	2302      	movs	r3, #2
 800366c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003670:	e069      	b.n	8003746 <UART_SetConfig+0x27e>
 8003672:	2304      	movs	r3, #4
 8003674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003678:	e065      	b.n	8003746 <UART_SetConfig+0x27e>
 800367a:	2308      	movs	r3, #8
 800367c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003680:	e061      	b.n	8003746 <UART_SetConfig+0x27e>
 8003682:	2310      	movs	r3, #16
 8003684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003688:	e05d      	b.n	8003746 <UART_SetConfig+0x27e>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a4b      	ldr	r2, [pc, #300]	; (80037bc <UART_SetConfig+0x2f4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d125      	bne.n	80036e0 <UART_SetConfig+0x218>
 8003694:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <UART_SetConfig+0x2e8>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800369e:	2bc0      	cmp	r3, #192	; 0xc0
 80036a0:	d016      	beq.n	80036d0 <UART_SetConfig+0x208>
 80036a2:	2bc0      	cmp	r3, #192	; 0xc0
 80036a4:	d818      	bhi.n	80036d8 <UART_SetConfig+0x210>
 80036a6:	2b80      	cmp	r3, #128	; 0x80
 80036a8:	d00a      	beq.n	80036c0 <UART_SetConfig+0x1f8>
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d814      	bhi.n	80036d8 <UART_SetConfig+0x210>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <UART_SetConfig+0x1f0>
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d008      	beq.n	80036c8 <UART_SetConfig+0x200>
 80036b6:	e00f      	b.n	80036d8 <UART_SetConfig+0x210>
 80036b8:	2300      	movs	r3, #0
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036be:	e042      	b.n	8003746 <UART_SetConfig+0x27e>
 80036c0:	2302      	movs	r3, #2
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036c6:	e03e      	b.n	8003746 <UART_SetConfig+0x27e>
 80036c8:	2304      	movs	r3, #4
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ce:	e03a      	b.n	8003746 <UART_SetConfig+0x27e>
 80036d0:	2308      	movs	r3, #8
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036d6:	e036      	b.n	8003746 <UART_SetConfig+0x27e>
 80036d8:	2310      	movs	r3, #16
 80036da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036de:	e032      	b.n	8003746 <UART_SetConfig+0x27e>
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a30      	ldr	r2, [pc, #192]	; (80037a8 <UART_SetConfig+0x2e0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d12a      	bne.n	8003740 <UART_SetConfig+0x278>
 80036ea:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <UART_SetConfig+0x2e8>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036f8:	d01a      	beq.n	8003730 <UART_SetConfig+0x268>
 80036fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036fe:	d81b      	bhi.n	8003738 <UART_SetConfig+0x270>
 8003700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003704:	d00c      	beq.n	8003720 <UART_SetConfig+0x258>
 8003706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800370a:	d815      	bhi.n	8003738 <UART_SetConfig+0x270>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <UART_SetConfig+0x250>
 8003710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003714:	d008      	beq.n	8003728 <UART_SetConfig+0x260>
 8003716:	e00f      	b.n	8003738 <UART_SetConfig+0x270>
 8003718:	2300      	movs	r3, #0
 800371a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800371e:	e012      	b.n	8003746 <UART_SetConfig+0x27e>
 8003720:	2302      	movs	r3, #2
 8003722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003726:	e00e      	b.n	8003746 <UART_SetConfig+0x27e>
 8003728:	2304      	movs	r3, #4
 800372a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800372e:	e00a      	b.n	8003746 <UART_SetConfig+0x27e>
 8003730:	2308      	movs	r3, #8
 8003732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003736:	e006      	b.n	8003746 <UART_SetConfig+0x27e>
 8003738:	2310      	movs	r3, #16
 800373a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800373e:	e002      	b.n	8003746 <UART_SetConfig+0x27e>
 8003740:	2310      	movs	r3, #16
 8003742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <UART_SetConfig+0x2e0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	f040 80a8 	bne.w	80038a2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003756:	2b08      	cmp	r3, #8
 8003758:	d834      	bhi.n	80037c4 <UART_SetConfig+0x2fc>
 800375a:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <UART_SetConfig+0x298>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003785 	.word	0x08003785
 8003764:	080037c5 	.word	0x080037c5
 8003768:	0800378d 	.word	0x0800378d
 800376c:	080037c5 	.word	0x080037c5
 8003770:	08003793 	.word	0x08003793
 8003774:	080037c5 	.word	0x080037c5
 8003778:	080037c5 	.word	0x080037c5
 800377c:	080037c5 	.word	0x080037c5
 8003780:	0800379b 	.word	0x0800379b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003784:	f7fe fc40 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800378a:	e021      	b.n	80037d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <UART_SetConfig+0x2f8>)
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003790:	e01e      	b.n	80037d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003792:	f7fe fbcb 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8003796:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003798:	e01a      	b.n	80037d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037a0:	e016      	b.n	80037d0 <UART_SetConfig+0x308>
 80037a2:	bf00      	nop
 80037a4:	cfff69f3 	.word	0xcfff69f3
 80037a8:	40008000 	.word	0x40008000
 80037ac:	40013800 	.word	0x40013800
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40004400 	.word	0x40004400
 80037b8:	40004800 	.word	0x40004800
 80037bc:	40004c00 	.word	0x40004c00
 80037c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 812a 	beq.w	8003a2c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	4a9e      	ldr	r2, [pc, #632]	; (8003a58 <UART_SetConfig+0x590>)
 80037de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d305      	bcc.n	8003808 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	429a      	cmp	r2, r3
 8003806:	d903      	bls.n	8003810 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800380e:	e10d      	b.n	8003a2c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	2200      	movs	r2, #0
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	60fa      	str	r2, [r7, #12]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	4a8e      	ldr	r2, [pc, #568]	; (8003a58 <UART_SetConfig+0x590>)
 800381e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003822:	b29b      	uxth	r3, r3
 8003824:	2200      	movs	r2, #0
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800382e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003832:	f7fc fd45 	bl	80002c0 <__aeabi_uldivmod>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	020b      	lsls	r3, r1, #8
 8003848:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800384c:	0202      	lsls	r2, r0, #8
 800384e:	6979      	ldr	r1, [r7, #20]
 8003850:	6849      	ldr	r1, [r1, #4]
 8003852:	0849      	lsrs	r1, r1, #1
 8003854:	2000      	movs	r0, #0
 8003856:	460c      	mov	r4, r1
 8003858:	4605      	mov	r5, r0
 800385a:	eb12 0804 	adds.w	r8, r2, r4
 800385e:	eb43 0905 	adc.w	r9, r3, r5
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	469a      	mov	sl, r3
 800386a:	4693      	mov	fp, r2
 800386c:	4652      	mov	r2, sl
 800386e:	465b      	mov	r3, fp
 8003870:	4640      	mov	r0, r8
 8003872:	4649      	mov	r1, r9
 8003874:	f7fc fd24 	bl	80002c0 <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4613      	mov	r3, r2
 800387e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003886:	d308      	bcc.n	800389a <UART_SetConfig+0x3d2>
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800388e:	d204      	bcs.n	800389a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	60da      	str	r2, [r3, #12]
 8003898:	e0c8      	b.n	8003a2c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038a0:	e0c4      	b.n	8003a2c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038aa:	d167      	bne.n	800397c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80038ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d828      	bhi.n	8003906 <UART_SetConfig+0x43e>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0x3f4>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	080038e9 	.word	0x080038e9
 80038c4:	080038f1 	.word	0x080038f1
 80038c8:	08003907 	.word	0x08003907
 80038cc:	080038f7 	.word	0x080038f7
 80038d0:	08003907 	.word	0x08003907
 80038d4:	08003907 	.word	0x08003907
 80038d8:	08003907 	.word	0x08003907
 80038dc:	080038ff 	.word	0x080038ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e0:	f7fe fb92 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 80038e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038e6:	e014      	b.n	8003912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e8:	f7fe fba4 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 80038ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038ee:	e010      	b.n	8003912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f0:	4b5a      	ldr	r3, [pc, #360]	; (8003a5c <UART_SetConfig+0x594>)
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038f4:	e00d      	b.n	8003912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f6:	f7fe fb19 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 80038fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038fc:	e009      	b.n	8003912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003904:	e005      	b.n	8003912 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8089 	beq.w	8003a2c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	4a4e      	ldr	r2, [pc, #312]	; (8003a58 <UART_SetConfig+0x590>)
 8003920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003924:	461a      	mov	r2, r3
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	fbb3 f3f2 	udiv	r3, r3, r2
 800392c:	005a      	lsls	r2, r3, #1
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	441a      	add	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	2b0f      	cmp	r3, #15
 8003944:	d916      	bls.n	8003974 <UART_SetConfig+0x4ac>
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d212      	bcs.n	8003974 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	b29b      	uxth	r3, r3
 8003952:	f023 030f 	bic.w	r3, r3, #15
 8003956:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	b29b      	uxth	r3, r3
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	b29a      	uxth	r2, r3
 8003964:	8bfb      	ldrh	r3, [r7, #30]
 8003966:	4313      	orrs	r3, r2
 8003968:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	8bfa      	ldrh	r2, [r7, #30]
 8003970:	60da      	str	r2, [r3, #12]
 8003972:	e05b      	b.n	8003a2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800397a:	e057      	b.n	8003a2c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800397c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003980:	2b08      	cmp	r3, #8
 8003982:	d828      	bhi.n	80039d6 <UART_SetConfig+0x50e>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <UART_SetConfig+0x4c4>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039b1 	.word	0x080039b1
 8003990:	080039b9 	.word	0x080039b9
 8003994:	080039c1 	.word	0x080039c1
 8003998:	080039d7 	.word	0x080039d7
 800399c:	080039c7 	.word	0x080039c7
 80039a0:	080039d7 	.word	0x080039d7
 80039a4:	080039d7 	.word	0x080039d7
 80039a8:	080039d7 	.word	0x080039d7
 80039ac:	080039cf 	.word	0x080039cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b0:	f7fe fb2a 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 80039b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039b6:	e014      	b.n	80039e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b8:	f7fe fb3c 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 80039bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039be:	e010      	b.n	80039e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c0:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <UART_SetConfig+0x594>)
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039c4:	e00d      	b.n	80039e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c6:	f7fe fab1 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 80039ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039cc:	e009      	b.n	80039e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039d4:	e005      	b.n	80039e2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039e0:	bf00      	nop
    }

    if (pclk != 0U)
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d021      	beq.n	8003a2c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <UART_SetConfig+0x590>)
 80039ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f2:	461a      	mov	r2, r3
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	441a      	add	r2, r3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	2b0f      	cmp	r3, #15
 8003a10:	d909      	bls.n	8003a26 <UART_SetConfig+0x55e>
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a18:	d205      	bcs.n	8003a26 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60da      	str	r2, [r3, #12]
 8003a24:	e002      	b.n	8003a2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003a48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3730      	adds	r7, #48	; 0x30
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a56:	bf00      	nop
 8003a58:	080050d0 	.word	0x080050d0
 8003a5c:	00f42400 	.word	0x00f42400

08003a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b5e:	d10a      	bne.n	8003b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bb4:	f7fd fa06 	bl	8000fc4 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d10e      	bne.n	8003be6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f82f 	bl	8003c3a <UART_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e025      	b.n	8003c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d10e      	bne.n	8003c12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f819 	bl	8003c3a <UART_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e00f      	b.n	8003c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b09c      	sub	sp, #112	; 0x70
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4a:	e0a9      	b.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	f000 80a5 	beq.w	8003da0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c56:	f7fd f9b5 	bl	8000fc4 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x32>
 8003c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d140      	bne.n	8003cee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c80:	667b      	str	r3, [r7, #100]	; 0x64
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e6      	bne.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e5      	bne.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e069      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d051      	beq.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d0a:	d149      	bne.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
 8003d36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e6      	bne.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	613b      	str	r3, [r7, #16]
   return(result);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3308      	adds	r3, #8
 8003d66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d68:	623a      	str	r2, [r7, #32]
 8003d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	69f9      	ldr	r1, [r7, #28]
 8003d6e:	6a3a      	ldr	r2, [r7, #32]
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e5      	bne.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e010      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4013      	ands	r3, r2
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	bf0c      	ite	eq
 8003db0:	2301      	moveq	r3, #1
 8003db2:	2300      	movne	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	f43f af46 	beq.w	8003c4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3770      	adds	r7, #112	; 0x70
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e027      	b.n	8003e30 <HAL_UARTEx_DisableFifoMode+0x66>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	; 0x24
 8003dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e02d      	b.n	8003eb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	; 0x24
 8003e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f84f 	bl	8003f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e02d      	b.n	8003f2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2224      	movs	r2, #36	; 0x24
 8003edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f811 	bl	8003f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d108      	bne.n	8003f56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f54:	e031      	b.n	8003fba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f56:	2308      	movs	r3, #8
 8003f58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	0e5b      	lsrs	r3, r3, #25
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	0f5b      	lsrs	r3, r3, #29
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f7e:	7bbb      	ldrb	r3, [r7, #14]
 8003f80:	7b3a      	ldrb	r2, [r7, #12]
 8003f82:	4911      	ldr	r1, [pc, #68]	; (8003fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8003f84:	5c8a      	ldrb	r2, [r1, r2]
 8003f86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f8a:	7b3a      	ldrb	r2, [r7, #12]
 8003f8c:	490f      	ldr	r1, [pc, #60]	; (8003fcc <UARTEx_SetNbDataToProcess+0x98>)
 8003f8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f90:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	7b7a      	ldrb	r2, [r7, #13]
 8003fa0:	4909      	ldr	r1, [pc, #36]	; (8003fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8003fa2:	5c8a      	ldrb	r2, [r1, r2]
 8003fa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003fa8:	7b7a      	ldrb	r2, [r7, #13]
 8003faa:	4908      	ldr	r1, [pc, #32]	; (8003fcc <UARTEx_SetNbDataToProcess+0x98>)
 8003fac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fae:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003fba:	bf00      	nop
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	080050e8 	.word	0x080050e8
 8003fcc:	080050f0 	.word	0x080050f0

08003fd0 <__errno>:
 8003fd0:	4b01      	ldr	r3, [pc, #4]	; (8003fd8 <__errno+0x8>)
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	2000000c 	.word	0x2000000c

08003fdc <__libc_init_array>:
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	4d0d      	ldr	r5, [pc, #52]	; (8004014 <__libc_init_array+0x38>)
 8003fe0:	4c0d      	ldr	r4, [pc, #52]	; (8004018 <__libc_init_array+0x3c>)
 8003fe2:	1b64      	subs	r4, r4, r5
 8003fe4:	10a4      	asrs	r4, r4, #2
 8003fe6:	2600      	movs	r6, #0
 8003fe8:	42a6      	cmp	r6, r4
 8003fea:	d109      	bne.n	8004000 <__libc_init_array+0x24>
 8003fec:	4d0b      	ldr	r5, [pc, #44]	; (800401c <__libc_init_array+0x40>)
 8003fee:	4c0c      	ldr	r4, [pc, #48]	; (8004020 <__libc_init_array+0x44>)
 8003ff0:	f001 f824 	bl	800503c <_init>
 8003ff4:	1b64      	subs	r4, r4, r5
 8003ff6:	10a4      	asrs	r4, r4, #2
 8003ff8:	2600      	movs	r6, #0
 8003ffa:	42a6      	cmp	r6, r4
 8003ffc:	d105      	bne.n	800400a <__libc_init_array+0x2e>
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	f855 3b04 	ldr.w	r3, [r5], #4
 8004004:	4798      	blx	r3
 8004006:	3601      	adds	r6, #1
 8004008:	e7ee      	b.n	8003fe8 <__libc_init_array+0xc>
 800400a:	f855 3b04 	ldr.w	r3, [r5], #4
 800400e:	4798      	blx	r3
 8004010:	3601      	adds	r6, #1
 8004012:	e7f2      	b.n	8003ffa <__libc_init_array+0x1e>
 8004014:	08005198 	.word	0x08005198
 8004018:	08005198 	.word	0x08005198
 800401c:	08005198 	.word	0x08005198
 8004020:	0800519c 	.word	0x0800519c

08004024 <memset>:
 8004024:	4402      	add	r2, r0
 8004026:	4603      	mov	r3, r0
 8004028:	4293      	cmp	r3, r2
 800402a:	d100      	bne.n	800402e <memset+0xa>
 800402c:	4770      	bx	lr
 800402e:	f803 1b01 	strb.w	r1, [r3], #1
 8004032:	e7f9      	b.n	8004028 <memset+0x4>

08004034 <iprintf>:
 8004034:	b40f      	push	{r0, r1, r2, r3}
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <iprintf+0x2c>)
 8004038:	b513      	push	{r0, r1, r4, lr}
 800403a:	681c      	ldr	r4, [r3, #0]
 800403c:	b124      	cbz	r4, 8004048 <iprintf+0x14>
 800403e:	69a3      	ldr	r3, [r4, #24]
 8004040:	b913      	cbnz	r3, 8004048 <iprintf+0x14>
 8004042:	4620      	mov	r0, r4
 8004044:	f000 fa5e 	bl	8004504 <__sinit>
 8004048:	ab05      	add	r3, sp, #20
 800404a:	9a04      	ldr	r2, [sp, #16]
 800404c:	68a1      	ldr	r1, [r4, #8]
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	4620      	mov	r0, r4
 8004052:	f000 fc67 	bl	8004924 <_vfiprintf_r>
 8004056:	b002      	add	sp, #8
 8004058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800405c:	b004      	add	sp, #16
 800405e:	4770      	bx	lr
 8004060:	2000000c 	.word	0x2000000c

08004064 <_puts_r>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	460e      	mov	r6, r1
 8004068:	4605      	mov	r5, r0
 800406a:	b118      	cbz	r0, 8004074 <_puts_r+0x10>
 800406c:	6983      	ldr	r3, [r0, #24]
 800406e:	b90b      	cbnz	r3, 8004074 <_puts_r+0x10>
 8004070:	f000 fa48 	bl	8004504 <__sinit>
 8004074:	69ab      	ldr	r3, [r5, #24]
 8004076:	68ac      	ldr	r4, [r5, #8]
 8004078:	b913      	cbnz	r3, 8004080 <_puts_r+0x1c>
 800407a:	4628      	mov	r0, r5
 800407c:	f000 fa42 	bl	8004504 <__sinit>
 8004080:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <_puts_r+0xd0>)
 8004082:	429c      	cmp	r4, r3
 8004084:	d120      	bne.n	80040c8 <_puts_r+0x64>
 8004086:	686c      	ldr	r4, [r5, #4]
 8004088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800408a:	07db      	lsls	r3, r3, #31
 800408c:	d405      	bmi.n	800409a <_puts_r+0x36>
 800408e:	89a3      	ldrh	r3, [r4, #12]
 8004090:	0598      	lsls	r0, r3, #22
 8004092:	d402      	bmi.n	800409a <_puts_r+0x36>
 8004094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004096:	f000 fad3 	bl	8004640 <__retarget_lock_acquire_recursive>
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	0719      	lsls	r1, r3, #28
 800409e:	d51d      	bpl.n	80040dc <_puts_r+0x78>
 80040a0:	6923      	ldr	r3, [r4, #16]
 80040a2:	b1db      	cbz	r3, 80040dc <_puts_r+0x78>
 80040a4:	3e01      	subs	r6, #1
 80040a6:	68a3      	ldr	r3, [r4, #8]
 80040a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040ac:	3b01      	subs	r3, #1
 80040ae:	60a3      	str	r3, [r4, #8]
 80040b0:	bb39      	cbnz	r1, 8004102 <_puts_r+0x9e>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	da38      	bge.n	8004128 <_puts_r+0xc4>
 80040b6:	4622      	mov	r2, r4
 80040b8:	210a      	movs	r1, #10
 80040ba:	4628      	mov	r0, r5
 80040bc:	f000 f848 	bl	8004150 <__swbuf_r>
 80040c0:	3001      	adds	r0, #1
 80040c2:	d011      	beq.n	80040e8 <_puts_r+0x84>
 80040c4:	250a      	movs	r5, #10
 80040c6:	e011      	b.n	80040ec <_puts_r+0x88>
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <_puts_r+0xd4>)
 80040ca:	429c      	cmp	r4, r3
 80040cc:	d101      	bne.n	80040d2 <_puts_r+0x6e>
 80040ce:	68ac      	ldr	r4, [r5, #8]
 80040d0:	e7da      	b.n	8004088 <_puts_r+0x24>
 80040d2:	4b1a      	ldr	r3, [pc, #104]	; (800413c <_puts_r+0xd8>)
 80040d4:	429c      	cmp	r4, r3
 80040d6:	bf08      	it	eq
 80040d8:	68ec      	ldreq	r4, [r5, #12]
 80040da:	e7d5      	b.n	8004088 <_puts_r+0x24>
 80040dc:	4621      	mov	r1, r4
 80040de:	4628      	mov	r0, r5
 80040e0:	f000 f888 	bl	80041f4 <__swsetup_r>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d0dd      	beq.n	80040a4 <_puts_r+0x40>
 80040e8:	f04f 35ff 	mov.w	r5, #4294967295
 80040ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040ee:	07da      	lsls	r2, r3, #31
 80040f0:	d405      	bmi.n	80040fe <_puts_r+0x9a>
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	059b      	lsls	r3, r3, #22
 80040f6:	d402      	bmi.n	80040fe <_puts_r+0x9a>
 80040f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040fa:	f000 faa2 	bl	8004642 <__retarget_lock_release_recursive>
 80040fe:	4628      	mov	r0, r5
 8004100:	bd70      	pop	{r4, r5, r6, pc}
 8004102:	2b00      	cmp	r3, #0
 8004104:	da04      	bge.n	8004110 <_puts_r+0xac>
 8004106:	69a2      	ldr	r2, [r4, #24]
 8004108:	429a      	cmp	r2, r3
 800410a:	dc06      	bgt.n	800411a <_puts_r+0xb6>
 800410c:	290a      	cmp	r1, #10
 800410e:	d004      	beq.n	800411a <_puts_r+0xb6>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	6022      	str	r2, [r4, #0]
 8004116:	7019      	strb	r1, [r3, #0]
 8004118:	e7c5      	b.n	80040a6 <_puts_r+0x42>
 800411a:	4622      	mov	r2, r4
 800411c:	4628      	mov	r0, r5
 800411e:	f000 f817 	bl	8004150 <__swbuf_r>
 8004122:	3001      	adds	r0, #1
 8004124:	d1bf      	bne.n	80040a6 <_puts_r+0x42>
 8004126:	e7df      	b.n	80040e8 <_puts_r+0x84>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	250a      	movs	r5, #10
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	6022      	str	r2, [r4, #0]
 8004130:	701d      	strb	r5, [r3, #0]
 8004132:	e7db      	b.n	80040ec <_puts_r+0x88>
 8004134:	0800511c 	.word	0x0800511c
 8004138:	0800513c 	.word	0x0800513c
 800413c:	080050fc 	.word	0x080050fc

08004140 <puts>:
 8004140:	4b02      	ldr	r3, [pc, #8]	; (800414c <puts+0xc>)
 8004142:	4601      	mov	r1, r0
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	f7ff bf8d 	b.w	8004064 <_puts_r>
 800414a:	bf00      	nop
 800414c:	2000000c 	.word	0x2000000c

08004150 <__swbuf_r>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	460e      	mov	r6, r1
 8004154:	4614      	mov	r4, r2
 8004156:	4605      	mov	r5, r0
 8004158:	b118      	cbz	r0, 8004162 <__swbuf_r+0x12>
 800415a:	6983      	ldr	r3, [r0, #24]
 800415c:	b90b      	cbnz	r3, 8004162 <__swbuf_r+0x12>
 800415e:	f000 f9d1 	bl	8004504 <__sinit>
 8004162:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <__swbuf_r+0x98>)
 8004164:	429c      	cmp	r4, r3
 8004166:	d12b      	bne.n	80041c0 <__swbuf_r+0x70>
 8004168:	686c      	ldr	r4, [r5, #4]
 800416a:	69a3      	ldr	r3, [r4, #24]
 800416c:	60a3      	str	r3, [r4, #8]
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	071a      	lsls	r2, r3, #28
 8004172:	d52f      	bpl.n	80041d4 <__swbuf_r+0x84>
 8004174:	6923      	ldr	r3, [r4, #16]
 8004176:	b36b      	cbz	r3, 80041d4 <__swbuf_r+0x84>
 8004178:	6923      	ldr	r3, [r4, #16]
 800417a:	6820      	ldr	r0, [r4, #0]
 800417c:	1ac0      	subs	r0, r0, r3
 800417e:	6963      	ldr	r3, [r4, #20]
 8004180:	b2f6      	uxtb	r6, r6
 8004182:	4283      	cmp	r3, r0
 8004184:	4637      	mov	r7, r6
 8004186:	dc04      	bgt.n	8004192 <__swbuf_r+0x42>
 8004188:	4621      	mov	r1, r4
 800418a:	4628      	mov	r0, r5
 800418c:	f000 f926 	bl	80043dc <_fflush_r>
 8004190:	bb30      	cbnz	r0, 80041e0 <__swbuf_r+0x90>
 8004192:	68a3      	ldr	r3, [r4, #8]
 8004194:	3b01      	subs	r3, #1
 8004196:	60a3      	str	r3, [r4, #8]
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	6022      	str	r2, [r4, #0]
 800419e:	701e      	strb	r6, [r3, #0]
 80041a0:	6963      	ldr	r3, [r4, #20]
 80041a2:	3001      	adds	r0, #1
 80041a4:	4283      	cmp	r3, r0
 80041a6:	d004      	beq.n	80041b2 <__swbuf_r+0x62>
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	07db      	lsls	r3, r3, #31
 80041ac:	d506      	bpl.n	80041bc <__swbuf_r+0x6c>
 80041ae:	2e0a      	cmp	r6, #10
 80041b0:	d104      	bne.n	80041bc <__swbuf_r+0x6c>
 80041b2:	4621      	mov	r1, r4
 80041b4:	4628      	mov	r0, r5
 80041b6:	f000 f911 	bl	80043dc <_fflush_r>
 80041ba:	b988      	cbnz	r0, 80041e0 <__swbuf_r+0x90>
 80041bc:	4638      	mov	r0, r7
 80041be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <__swbuf_r+0x9c>)
 80041c2:	429c      	cmp	r4, r3
 80041c4:	d101      	bne.n	80041ca <__swbuf_r+0x7a>
 80041c6:	68ac      	ldr	r4, [r5, #8]
 80041c8:	e7cf      	b.n	800416a <__swbuf_r+0x1a>
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <__swbuf_r+0xa0>)
 80041cc:	429c      	cmp	r4, r3
 80041ce:	bf08      	it	eq
 80041d0:	68ec      	ldreq	r4, [r5, #12]
 80041d2:	e7ca      	b.n	800416a <__swbuf_r+0x1a>
 80041d4:	4621      	mov	r1, r4
 80041d6:	4628      	mov	r0, r5
 80041d8:	f000 f80c 	bl	80041f4 <__swsetup_r>
 80041dc:	2800      	cmp	r0, #0
 80041de:	d0cb      	beq.n	8004178 <__swbuf_r+0x28>
 80041e0:	f04f 37ff 	mov.w	r7, #4294967295
 80041e4:	e7ea      	b.n	80041bc <__swbuf_r+0x6c>
 80041e6:	bf00      	nop
 80041e8:	0800511c 	.word	0x0800511c
 80041ec:	0800513c 	.word	0x0800513c
 80041f0:	080050fc 	.word	0x080050fc

080041f4 <__swsetup_r>:
 80041f4:	4b32      	ldr	r3, [pc, #200]	; (80042c0 <__swsetup_r+0xcc>)
 80041f6:	b570      	push	{r4, r5, r6, lr}
 80041f8:	681d      	ldr	r5, [r3, #0]
 80041fa:	4606      	mov	r6, r0
 80041fc:	460c      	mov	r4, r1
 80041fe:	b125      	cbz	r5, 800420a <__swsetup_r+0x16>
 8004200:	69ab      	ldr	r3, [r5, #24]
 8004202:	b913      	cbnz	r3, 800420a <__swsetup_r+0x16>
 8004204:	4628      	mov	r0, r5
 8004206:	f000 f97d 	bl	8004504 <__sinit>
 800420a:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <__swsetup_r+0xd0>)
 800420c:	429c      	cmp	r4, r3
 800420e:	d10f      	bne.n	8004230 <__swsetup_r+0x3c>
 8004210:	686c      	ldr	r4, [r5, #4]
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004218:	0719      	lsls	r1, r3, #28
 800421a:	d42c      	bmi.n	8004276 <__swsetup_r+0x82>
 800421c:	06dd      	lsls	r5, r3, #27
 800421e:	d411      	bmi.n	8004244 <__swsetup_r+0x50>
 8004220:	2309      	movs	r3, #9
 8004222:	6033      	str	r3, [r6, #0]
 8004224:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	f04f 30ff 	mov.w	r0, #4294967295
 800422e:	e03e      	b.n	80042ae <__swsetup_r+0xba>
 8004230:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <__swsetup_r+0xd4>)
 8004232:	429c      	cmp	r4, r3
 8004234:	d101      	bne.n	800423a <__swsetup_r+0x46>
 8004236:	68ac      	ldr	r4, [r5, #8]
 8004238:	e7eb      	b.n	8004212 <__swsetup_r+0x1e>
 800423a:	4b24      	ldr	r3, [pc, #144]	; (80042cc <__swsetup_r+0xd8>)
 800423c:	429c      	cmp	r4, r3
 800423e:	bf08      	it	eq
 8004240:	68ec      	ldreq	r4, [r5, #12]
 8004242:	e7e6      	b.n	8004212 <__swsetup_r+0x1e>
 8004244:	0758      	lsls	r0, r3, #29
 8004246:	d512      	bpl.n	800426e <__swsetup_r+0x7a>
 8004248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800424a:	b141      	cbz	r1, 800425e <__swsetup_r+0x6a>
 800424c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004250:	4299      	cmp	r1, r3
 8004252:	d002      	beq.n	800425a <__swsetup_r+0x66>
 8004254:	4630      	mov	r0, r6
 8004256:	f000 fa5b 	bl	8004710 <_free_r>
 800425a:	2300      	movs	r3, #0
 800425c:	6363      	str	r3, [r4, #52]	; 0x34
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004264:	81a3      	strh	r3, [r4, #12]
 8004266:	2300      	movs	r3, #0
 8004268:	6063      	str	r3, [r4, #4]
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	f043 0308 	orr.w	r3, r3, #8
 8004274:	81a3      	strh	r3, [r4, #12]
 8004276:	6923      	ldr	r3, [r4, #16]
 8004278:	b94b      	cbnz	r3, 800428e <__swsetup_r+0x9a>
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004284:	d003      	beq.n	800428e <__swsetup_r+0x9a>
 8004286:	4621      	mov	r1, r4
 8004288:	4630      	mov	r0, r6
 800428a:	f000 fa01 	bl	8004690 <__smakebuf_r>
 800428e:	89a0      	ldrh	r0, [r4, #12]
 8004290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004294:	f010 0301 	ands.w	r3, r0, #1
 8004298:	d00a      	beq.n	80042b0 <__swsetup_r+0xbc>
 800429a:	2300      	movs	r3, #0
 800429c:	60a3      	str	r3, [r4, #8]
 800429e:	6963      	ldr	r3, [r4, #20]
 80042a0:	425b      	negs	r3, r3
 80042a2:	61a3      	str	r3, [r4, #24]
 80042a4:	6923      	ldr	r3, [r4, #16]
 80042a6:	b943      	cbnz	r3, 80042ba <__swsetup_r+0xc6>
 80042a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042ac:	d1ba      	bne.n	8004224 <__swsetup_r+0x30>
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	0781      	lsls	r1, r0, #30
 80042b2:	bf58      	it	pl
 80042b4:	6963      	ldrpl	r3, [r4, #20]
 80042b6:	60a3      	str	r3, [r4, #8]
 80042b8:	e7f4      	b.n	80042a4 <__swsetup_r+0xb0>
 80042ba:	2000      	movs	r0, #0
 80042bc:	e7f7      	b.n	80042ae <__swsetup_r+0xba>
 80042be:	bf00      	nop
 80042c0:	2000000c 	.word	0x2000000c
 80042c4:	0800511c 	.word	0x0800511c
 80042c8:	0800513c 	.word	0x0800513c
 80042cc:	080050fc 	.word	0x080050fc

080042d0 <__sflush_r>:
 80042d0:	898a      	ldrh	r2, [r1, #12]
 80042d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d6:	4605      	mov	r5, r0
 80042d8:	0710      	lsls	r0, r2, #28
 80042da:	460c      	mov	r4, r1
 80042dc:	d458      	bmi.n	8004390 <__sflush_r+0xc0>
 80042de:	684b      	ldr	r3, [r1, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	dc05      	bgt.n	80042f0 <__sflush_r+0x20>
 80042e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	dc02      	bgt.n	80042f0 <__sflush_r+0x20>
 80042ea:	2000      	movs	r0, #0
 80042ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042f2:	2e00      	cmp	r6, #0
 80042f4:	d0f9      	beq.n	80042ea <__sflush_r+0x1a>
 80042f6:	2300      	movs	r3, #0
 80042f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042fc:	682f      	ldr	r7, [r5, #0]
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	d032      	beq.n	8004368 <__sflush_r+0x98>
 8004302:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	075a      	lsls	r2, r3, #29
 8004308:	d505      	bpl.n	8004316 <__sflush_r+0x46>
 800430a:	6863      	ldr	r3, [r4, #4]
 800430c:	1ac0      	subs	r0, r0, r3
 800430e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004310:	b10b      	cbz	r3, 8004316 <__sflush_r+0x46>
 8004312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004314:	1ac0      	subs	r0, r0, r3
 8004316:	2300      	movs	r3, #0
 8004318:	4602      	mov	r2, r0
 800431a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800431c:	6a21      	ldr	r1, [r4, #32]
 800431e:	4628      	mov	r0, r5
 8004320:	47b0      	blx	r6
 8004322:	1c43      	adds	r3, r0, #1
 8004324:	89a3      	ldrh	r3, [r4, #12]
 8004326:	d106      	bne.n	8004336 <__sflush_r+0x66>
 8004328:	6829      	ldr	r1, [r5, #0]
 800432a:	291d      	cmp	r1, #29
 800432c:	d82c      	bhi.n	8004388 <__sflush_r+0xb8>
 800432e:	4a2a      	ldr	r2, [pc, #168]	; (80043d8 <__sflush_r+0x108>)
 8004330:	40ca      	lsrs	r2, r1
 8004332:	07d6      	lsls	r6, r2, #31
 8004334:	d528      	bpl.n	8004388 <__sflush_r+0xb8>
 8004336:	2200      	movs	r2, #0
 8004338:	6062      	str	r2, [r4, #4]
 800433a:	04d9      	lsls	r1, r3, #19
 800433c:	6922      	ldr	r2, [r4, #16]
 800433e:	6022      	str	r2, [r4, #0]
 8004340:	d504      	bpl.n	800434c <__sflush_r+0x7c>
 8004342:	1c42      	adds	r2, r0, #1
 8004344:	d101      	bne.n	800434a <__sflush_r+0x7a>
 8004346:	682b      	ldr	r3, [r5, #0]
 8004348:	b903      	cbnz	r3, 800434c <__sflush_r+0x7c>
 800434a:	6560      	str	r0, [r4, #84]	; 0x54
 800434c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800434e:	602f      	str	r7, [r5, #0]
 8004350:	2900      	cmp	r1, #0
 8004352:	d0ca      	beq.n	80042ea <__sflush_r+0x1a>
 8004354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004358:	4299      	cmp	r1, r3
 800435a:	d002      	beq.n	8004362 <__sflush_r+0x92>
 800435c:	4628      	mov	r0, r5
 800435e:	f000 f9d7 	bl	8004710 <_free_r>
 8004362:	2000      	movs	r0, #0
 8004364:	6360      	str	r0, [r4, #52]	; 0x34
 8004366:	e7c1      	b.n	80042ec <__sflush_r+0x1c>
 8004368:	6a21      	ldr	r1, [r4, #32]
 800436a:	2301      	movs	r3, #1
 800436c:	4628      	mov	r0, r5
 800436e:	47b0      	blx	r6
 8004370:	1c41      	adds	r1, r0, #1
 8004372:	d1c7      	bne.n	8004304 <__sflush_r+0x34>
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0c4      	beq.n	8004304 <__sflush_r+0x34>
 800437a:	2b1d      	cmp	r3, #29
 800437c:	d001      	beq.n	8004382 <__sflush_r+0xb2>
 800437e:	2b16      	cmp	r3, #22
 8004380:	d101      	bne.n	8004386 <__sflush_r+0xb6>
 8004382:	602f      	str	r7, [r5, #0]
 8004384:	e7b1      	b.n	80042ea <__sflush_r+0x1a>
 8004386:	89a3      	ldrh	r3, [r4, #12]
 8004388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800438c:	81a3      	strh	r3, [r4, #12]
 800438e:	e7ad      	b.n	80042ec <__sflush_r+0x1c>
 8004390:	690f      	ldr	r7, [r1, #16]
 8004392:	2f00      	cmp	r7, #0
 8004394:	d0a9      	beq.n	80042ea <__sflush_r+0x1a>
 8004396:	0793      	lsls	r3, r2, #30
 8004398:	680e      	ldr	r6, [r1, #0]
 800439a:	bf08      	it	eq
 800439c:	694b      	ldreq	r3, [r1, #20]
 800439e:	600f      	str	r7, [r1, #0]
 80043a0:	bf18      	it	ne
 80043a2:	2300      	movne	r3, #0
 80043a4:	eba6 0807 	sub.w	r8, r6, r7
 80043a8:	608b      	str	r3, [r1, #8]
 80043aa:	f1b8 0f00 	cmp.w	r8, #0
 80043ae:	dd9c      	ble.n	80042ea <__sflush_r+0x1a>
 80043b0:	6a21      	ldr	r1, [r4, #32]
 80043b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043b4:	4643      	mov	r3, r8
 80043b6:	463a      	mov	r2, r7
 80043b8:	4628      	mov	r0, r5
 80043ba:	47b0      	blx	r6
 80043bc:	2800      	cmp	r0, #0
 80043be:	dc06      	bgt.n	80043ce <__sflush_r+0xfe>
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c6:	81a3      	strh	r3, [r4, #12]
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	e78e      	b.n	80042ec <__sflush_r+0x1c>
 80043ce:	4407      	add	r7, r0
 80043d0:	eba8 0800 	sub.w	r8, r8, r0
 80043d4:	e7e9      	b.n	80043aa <__sflush_r+0xda>
 80043d6:	bf00      	nop
 80043d8:	20400001 	.word	0x20400001

080043dc <_fflush_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	690b      	ldr	r3, [r1, #16]
 80043e0:	4605      	mov	r5, r0
 80043e2:	460c      	mov	r4, r1
 80043e4:	b913      	cbnz	r3, 80043ec <_fflush_r+0x10>
 80043e6:	2500      	movs	r5, #0
 80043e8:	4628      	mov	r0, r5
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	b118      	cbz	r0, 80043f6 <_fflush_r+0x1a>
 80043ee:	6983      	ldr	r3, [r0, #24]
 80043f0:	b90b      	cbnz	r3, 80043f6 <_fflush_r+0x1a>
 80043f2:	f000 f887 	bl	8004504 <__sinit>
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <_fflush_r+0x6c>)
 80043f8:	429c      	cmp	r4, r3
 80043fa:	d11b      	bne.n	8004434 <_fflush_r+0x58>
 80043fc:	686c      	ldr	r4, [r5, #4]
 80043fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0ef      	beq.n	80043e6 <_fflush_r+0xa>
 8004406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004408:	07d0      	lsls	r0, r2, #31
 800440a:	d404      	bmi.n	8004416 <_fflush_r+0x3a>
 800440c:	0599      	lsls	r1, r3, #22
 800440e:	d402      	bmi.n	8004416 <_fflush_r+0x3a>
 8004410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004412:	f000 f915 	bl	8004640 <__retarget_lock_acquire_recursive>
 8004416:	4628      	mov	r0, r5
 8004418:	4621      	mov	r1, r4
 800441a:	f7ff ff59 	bl	80042d0 <__sflush_r>
 800441e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004420:	07da      	lsls	r2, r3, #31
 8004422:	4605      	mov	r5, r0
 8004424:	d4e0      	bmi.n	80043e8 <_fflush_r+0xc>
 8004426:	89a3      	ldrh	r3, [r4, #12]
 8004428:	059b      	lsls	r3, r3, #22
 800442a:	d4dd      	bmi.n	80043e8 <_fflush_r+0xc>
 800442c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800442e:	f000 f908 	bl	8004642 <__retarget_lock_release_recursive>
 8004432:	e7d9      	b.n	80043e8 <_fflush_r+0xc>
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <_fflush_r+0x70>)
 8004436:	429c      	cmp	r4, r3
 8004438:	d101      	bne.n	800443e <_fflush_r+0x62>
 800443a:	68ac      	ldr	r4, [r5, #8]
 800443c:	e7df      	b.n	80043fe <_fflush_r+0x22>
 800443e:	4b04      	ldr	r3, [pc, #16]	; (8004450 <_fflush_r+0x74>)
 8004440:	429c      	cmp	r4, r3
 8004442:	bf08      	it	eq
 8004444:	68ec      	ldreq	r4, [r5, #12]
 8004446:	e7da      	b.n	80043fe <_fflush_r+0x22>
 8004448:	0800511c 	.word	0x0800511c
 800444c:	0800513c 	.word	0x0800513c
 8004450:	080050fc 	.word	0x080050fc

08004454 <std>:
 8004454:	2300      	movs	r3, #0
 8004456:	b510      	push	{r4, lr}
 8004458:	4604      	mov	r4, r0
 800445a:	e9c0 3300 	strd	r3, r3, [r0]
 800445e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004462:	6083      	str	r3, [r0, #8]
 8004464:	8181      	strh	r1, [r0, #12]
 8004466:	6643      	str	r3, [r0, #100]	; 0x64
 8004468:	81c2      	strh	r2, [r0, #14]
 800446a:	6183      	str	r3, [r0, #24]
 800446c:	4619      	mov	r1, r3
 800446e:	2208      	movs	r2, #8
 8004470:	305c      	adds	r0, #92	; 0x5c
 8004472:	f7ff fdd7 	bl	8004024 <memset>
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <std+0x38>)
 8004478:	6263      	str	r3, [r4, #36]	; 0x24
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <std+0x3c>)
 800447c:	62a3      	str	r3, [r4, #40]	; 0x28
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <std+0x40>)
 8004480:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <std+0x44>)
 8004484:	6224      	str	r4, [r4, #32]
 8004486:	6323      	str	r3, [r4, #48]	; 0x30
 8004488:	bd10      	pop	{r4, pc}
 800448a:	bf00      	nop
 800448c:	08004ecd 	.word	0x08004ecd
 8004490:	08004eef 	.word	0x08004eef
 8004494:	08004f27 	.word	0x08004f27
 8004498:	08004f4b 	.word	0x08004f4b

0800449c <_cleanup_r>:
 800449c:	4901      	ldr	r1, [pc, #4]	; (80044a4 <_cleanup_r+0x8>)
 800449e:	f000 b8af 	b.w	8004600 <_fwalk_reent>
 80044a2:	bf00      	nop
 80044a4:	080043dd 	.word	0x080043dd

080044a8 <__sfmoreglue>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	2268      	movs	r2, #104	; 0x68
 80044ac:	1e4d      	subs	r5, r1, #1
 80044ae:	4355      	muls	r5, r2
 80044b0:	460e      	mov	r6, r1
 80044b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044b6:	f000 f997 	bl	80047e8 <_malloc_r>
 80044ba:	4604      	mov	r4, r0
 80044bc:	b140      	cbz	r0, 80044d0 <__sfmoreglue+0x28>
 80044be:	2100      	movs	r1, #0
 80044c0:	e9c0 1600 	strd	r1, r6, [r0]
 80044c4:	300c      	adds	r0, #12
 80044c6:	60a0      	str	r0, [r4, #8]
 80044c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044cc:	f7ff fdaa 	bl	8004024 <memset>
 80044d0:	4620      	mov	r0, r4
 80044d2:	bd70      	pop	{r4, r5, r6, pc}

080044d4 <__sfp_lock_acquire>:
 80044d4:	4801      	ldr	r0, [pc, #4]	; (80044dc <__sfp_lock_acquire+0x8>)
 80044d6:	f000 b8b3 	b.w	8004640 <__retarget_lock_acquire_recursive>
 80044da:	bf00      	nop
 80044dc:	2000018d 	.word	0x2000018d

080044e0 <__sfp_lock_release>:
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <__sfp_lock_release+0x8>)
 80044e2:	f000 b8ae 	b.w	8004642 <__retarget_lock_release_recursive>
 80044e6:	bf00      	nop
 80044e8:	2000018d 	.word	0x2000018d

080044ec <__sinit_lock_acquire>:
 80044ec:	4801      	ldr	r0, [pc, #4]	; (80044f4 <__sinit_lock_acquire+0x8>)
 80044ee:	f000 b8a7 	b.w	8004640 <__retarget_lock_acquire_recursive>
 80044f2:	bf00      	nop
 80044f4:	2000018e 	.word	0x2000018e

080044f8 <__sinit_lock_release>:
 80044f8:	4801      	ldr	r0, [pc, #4]	; (8004500 <__sinit_lock_release+0x8>)
 80044fa:	f000 b8a2 	b.w	8004642 <__retarget_lock_release_recursive>
 80044fe:	bf00      	nop
 8004500:	2000018e 	.word	0x2000018e

08004504 <__sinit>:
 8004504:	b510      	push	{r4, lr}
 8004506:	4604      	mov	r4, r0
 8004508:	f7ff fff0 	bl	80044ec <__sinit_lock_acquire>
 800450c:	69a3      	ldr	r3, [r4, #24]
 800450e:	b11b      	cbz	r3, 8004518 <__sinit+0x14>
 8004510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004514:	f7ff bff0 	b.w	80044f8 <__sinit_lock_release>
 8004518:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800451c:	6523      	str	r3, [r4, #80]	; 0x50
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <__sinit+0x68>)
 8004520:	4a13      	ldr	r2, [pc, #76]	; (8004570 <__sinit+0x6c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	62a2      	str	r2, [r4, #40]	; 0x28
 8004526:	42a3      	cmp	r3, r4
 8004528:	bf04      	itt	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	61a3      	streq	r3, [r4, #24]
 800452e:	4620      	mov	r0, r4
 8004530:	f000 f820 	bl	8004574 <__sfp>
 8004534:	6060      	str	r0, [r4, #4]
 8004536:	4620      	mov	r0, r4
 8004538:	f000 f81c 	bl	8004574 <__sfp>
 800453c:	60a0      	str	r0, [r4, #8]
 800453e:	4620      	mov	r0, r4
 8004540:	f000 f818 	bl	8004574 <__sfp>
 8004544:	2200      	movs	r2, #0
 8004546:	60e0      	str	r0, [r4, #12]
 8004548:	2104      	movs	r1, #4
 800454a:	6860      	ldr	r0, [r4, #4]
 800454c:	f7ff ff82 	bl	8004454 <std>
 8004550:	68a0      	ldr	r0, [r4, #8]
 8004552:	2201      	movs	r2, #1
 8004554:	2109      	movs	r1, #9
 8004556:	f7ff ff7d 	bl	8004454 <std>
 800455a:	68e0      	ldr	r0, [r4, #12]
 800455c:	2202      	movs	r2, #2
 800455e:	2112      	movs	r1, #18
 8004560:	f7ff ff78 	bl	8004454 <std>
 8004564:	2301      	movs	r3, #1
 8004566:	61a3      	str	r3, [r4, #24]
 8004568:	e7d2      	b.n	8004510 <__sinit+0xc>
 800456a:	bf00      	nop
 800456c:	080050f8 	.word	0x080050f8
 8004570:	0800449d 	.word	0x0800449d

08004574 <__sfp>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	4607      	mov	r7, r0
 8004578:	f7ff ffac 	bl	80044d4 <__sfp_lock_acquire>
 800457c:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <__sfp+0x84>)
 800457e:	681e      	ldr	r6, [r3, #0]
 8004580:	69b3      	ldr	r3, [r6, #24]
 8004582:	b913      	cbnz	r3, 800458a <__sfp+0x16>
 8004584:	4630      	mov	r0, r6
 8004586:	f7ff ffbd 	bl	8004504 <__sinit>
 800458a:	3648      	adds	r6, #72	; 0x48
 800458c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004590:	3b01      	subs	r3, #1
 8004592:	d503      	bpl.n	800459c <__sfp+0x28>
 8004594:	6833      	ldr	r3, [r6, #0]
 8004596:	b30b      	cbz	r3, 80045dc <__sfp+0x68>
 8004598:	6836      	ldr	r6, [r6, #0]
 800459a:	e7f7      	b.n	800458c <__sfp+0x18>
 800459c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045a0:	b9d5      	cbnz	r5, 80045d8 <__sfp+0x64>
 80045a2:	4b16      	ldr	r3, [pc, #88]	; (80045fc <__sfp+0x88>)
 80045a4:	60e3      	str	r3, [r4, #12]
 80045a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045aa:	6665      	str	r5, [r4, #100]	; 0x64
 80045ac:	f000 f847 	bl	800463e <__retarget_lock_init_recursive>
 80045b0:	f7ff ff96 	bl	80044e0 <__sfp_lock_release>
 80045b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045bc:	6025      	str	r5, [r4, #0]
 80045be:	61a5      	str	r5, [r4, #24]
 80045c0:	2208      	movs	r2, #8
 80045c2:	4629      	mov	r1, r5
 80045c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045c8:	f7ff fd2c 	bl	8004024 <memset>
 80045cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80045d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80045d4:	4620      	mov	r0, r4
 80045d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d8:	3468      	adds	r4, #104	; 0x68
 80045da:	e7d9      	b.n	8004590 <__sfp+0x1c>
 80045dc:	2104      	movs	r1, #4
 80045de:	4638      	mov	r0, r7
 80045e0:	f7ff ff62 	bl	80044a8 <__sfmoreglue>
 80045e4:	4604      	mov	r4, r0
 80045e6:	6030      	str	r0, [r6, #0]
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d1d5      	bne.n	8004598 <__sfp+0x24>
 80045ec:	f7ff ff78 	bl	80044e0 <__sfp_lock_release>
 80045f0:	230c      	movs	r3, #12
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	e7ee      	b.n	80045d4 <__sfp+0x60>
 80045f6:	bf00      	nop
 80045f8:	080050f8 	.word	0x080050f8
 80045fc:	ffff0001 	.word	0xffff0001

08004600 <_fwalk_reent>:
 8004600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004604:	4606      	mov	r6, r0
 8004606:	4688      	mov	r8, r1
 8004608:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800460c:	2700      	movs	r7, #0
 800460e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004612:	f1b9 0901 	subs.w	r9, r9, #1
 8004616:	d505      	bpl.n	8004624 <_fwalk_reent+0x24>
 8004618:	6824      	ldr	r4, [r4, #0]
 800461a:	2c00      	cmp	r4, #0
 800461c:	d1f7      	bne.n	800460e <_fwalk_reent+0xe>
 800461e:	4638      	mov	r0, r7
 8004620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004624:	89ab      	ldrh	r3, [r5, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d907      	bls.n	800463a <_fwalk_reent+0x3a>
 800462a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800462e:	3301      	adds	r3, #1
 8004630:	d003      	beq.n	800463a <_fwalk_reent+0x3a>
 8004632:	4629      	mov	r1, r5
 8004634:	4630      	mov	r0, r6
 8004636:	47c0      	blx	r8
 8004638:	4307      	orrs	r7, r0
 800463a:	3568      	adds	r5, #104	; 0x68
 800463c:	e7e9      	b.n	8004612 <_fwalk_reent+0x12>

0800463e <__retarget_lock_init_recursive>:
 800463e:	4770      	bx	lr

08004640 <__retarget_lock_acquire_recursive>:
 8004640:	4770      	bx	lr

08004642 <__retarget_lock_release_recursive>:
 8004642:	4770      	bx	lr

08004644 <__swhatbuf_r>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	460e      	mov	r6, r1
 8004648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800464c:	2900      	cmp	r1, #0
 800464e:	b096      	sub	sp, #88	; 0x58
 8004650:	4614      	mov	r4, r2
 8004652:	461d      	mov	r5, r3
 8004654:	da08      	bge.n	8004668 <__swhatbuf_r+0x24>
 8004656:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	602a      	str	r2, [r5, #0]
 800465e:	061a      	lsls	r2, r3, #24
 8004660:	d410      	bmi.n	8004684 <__swhatbuf_r+0x40>
 8004662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004666:	e00e      	b.n	8004686 <__swhatbuf_r+0x42>
 8004668:	466a      	mov	r2, sp
 800466a:	f000 fc95 	bl	8004f98 <_fstat_r>
 800466e:	2800      	cmp	r0, #0
 8004670:	dbf1      	blt.n	8004656 <__swhatbuf_r+0x12>
 8004672:	9a01      	ldr	r2, [sp, #4]
 8004674:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004678:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800467c:	425a      	negs	r2, r3
 800467e:	415a      	adcs	r2, r3
 8004680:	602a      	str	r2, [r5, #0]
 8004682:	e7ee      	b.n	8004662 <__swhatbuf_r+0x1e>
 8004684:	2340      	movs	r3, #64	; 0x40
 8004686:	2000      	movs	r0, #0
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	b016      	add	sp, #88	; 0x58
 800468c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004690 <__smakebuf_r>:
 8004690:	898b      	ldrh	r3, [r1, #12]
 8004692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004694:	079d      	lsls	r5, r3, #30
 8004696:	4606      	mov	r6, r0
 8004698:	460c      	mov	r4, r1
 800469a:	d507      	bpl.n	80046ac <__smakebuf_r+0x1c>
 800469c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	6123      	str	r3, [r4, #16]
 80046a4:	2301      	movs	r3, #1
 80046a6:	6163      	str	r3, [r4, #20]
 80046a8:	b002      	add	sp, #8
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	ab01      	add	r3, sp, #4
 80046ae:	466a      	mov	r2, sp
 80046b0:	f7ff ffc8 	bl	8004644 <__swhatbuf_r>
 80046b4:	9900      	ldr	r1, [sp, #0]
 80046b6:	4605      	mov	r5, r0
 80046b8:	4630      	mov	r0, r6
 80046ba:	f000 f895 	bl	80047e8 <_malloc_r>
 80046be:	b948      	cbnz	r0, 80046d4 <__smakebuf_r+0x44>
 80046c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c4:	059a      	lsls	r2, r3, #22
 80046c6:	d4ef      	bmi.n	80046a8 <__smakebuf_r+0x18>
 80046c8:	f023 0303 	bic.w	r3, r3, #3
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	e7e3      	b.n	800469c <__smakebuf_r+0xc>
 80046d4:	4b0d      	ldr	r3, [pc, #52]	; (800470c <__smakebuf_r+0x7c>)
 80046d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	6020      	str	r0, [r4, #0]
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	9b00      	ldr	r3, [sp, #0]
 80046e4:	6163      	str	r3, [r4, #20]
 80046e6:	9b01      	ldr	r3, [sp, #4]
 80046e8:	6120      	str	r0, [r4, #16]
 80046ea:	b15b      	cbz	r3, 8004704 <__smakebuf_r+0x74>
 80046ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f0:	4630      	mov	r0, r6
 80046f2:	f000 fc63 	bl	8004fbc <_isatty_r>
 80046f6:	b128      	cbz	r0, 8004704 <__smakebuf_r+0x74>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	81a3      	strh	r3, [r4, #12]
 8004704:	89a0      	ldrh	r0, [r4, #12]
 8004706:	4305      	orrs	r5, r0
 8004708:	81a5      	strh	r5, [r4, #12]
 800470a:	e7cd      	b.n	80046a8 <__smakebuf_r+0x18>
 800470c:	0800449d 	.word	0x0800449d

08004710 <_free_r>:
 8004710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004712:	2900      	cmp	r1, #0
 8004714:	d044      	beq.n	80047a0 <_free_r+0x90>
 8004716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800471a:	9001      	str	r0, [sp, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f1a1 0404 	sub.w	r4, r1, #4
 8004722:	bfb8      	it	lt
 8004724:	18e4      	addlt	r4, r4, r3
 8004726:	f000 fc6b 	bl	8005000 <__malloc_lock>
 800472a:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <_free_r+0x94>)
 800472c:	9801      	ldr	r0, [sp, #4]
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	b933      	cbnz	r3, 8004740 <_free_r+0x30>
 8004732:	6063      	str	r3, [r4, #4]
 8004734:	6014      	str	r4, [r2, #0]
 8004736:	b003      	add	sp, #12
 8004738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800473c:	f000 bc66 	b.w	800500c <__malloc_unlock>
 8004740:	42a3      	cmp	r3, r4
 8004742:	d908      	bls.n	8004756 <_free_r+0x46>
 8004744:	6825      	ldr	r5, [r4, #0]
 8004746:	1961      	adds	r1, r4, r5
 8004748:	428b      	cmp	r3, r1
 800474a:	bf01      	itttt	eq
 800474c:	6819      	ldreq	r1, [r3, #0]
 800474e:	685b      	ldreq	r3, [r3, #4]
 8004750:	1949      	addeq	r1, r1, r5
 8004752:	6021      	streq	r1, [r4, #0]
 8004754:	e7ed      	b.n	8004732 <_free_r+0x22>
 8004756:	461a      	mov	r2, r3
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	b10b      	cbz	r3, 8004760 <_free_r+0x50>
 800475c:	42a3      	cmp	r3, r4
 800475e:	d9fa      	bls.n	8004756 <_free_r+0x46>
 8004760:	6811      	ldr	r1, [r2, #0]
 8004762:	1855      	adds	r5, r2, r1
 8004764:	42a5      	cmp	r5, r4
 8004766:	d10b      	bne.n	8004780 <_free_r+0x70>
 8004768:	6824      	ldr	r4, [r4, #0]
 800476a:	4421      	add	r1, r4
 800476c:	1854      	adds	r4, r2, r1
 800476e:	42a3      	cmp	r3, r4
 8004770:	6011      	str	r1, [r2, #0]
 8004772:	d1e0      	bne.n	8004736 <_free_r+0x26>
 8004774:	681c      	ldr	r4, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	6053      	str	r3, [r2, #4]
 800477a:	4421      	add	r1, r4
 800477c:	6011      	str	r1, [r2, #0]
 800477e:	e7da      	b.n	8004736 <_free_r+0x26>
 8004780:	d902      	bls.n	8004788 <_free_r+0x78>
 8004782:	230c      	movs	r3, #12
 8004784:	6003      	str	r3, [r0, #0]
 8004786:	e7d6      	b.n	8004736 <_free_r+0x26>
 8004788:	6825      	ldr	r5, [r4, #0]
 800478a:	1961      	adds	r1, r4, r5
 800478c:	428b      	cmp	r3, r1
 800478e:	bf04      	itt	eq
 8004790:	6819      	ldreq	r1, [r3, #0]
 8004792:	685b      	ldreq	r3, [r3, #4]
 8004794:	6063      	str	r3, [r4, #4]
 8004796:	bf04      	itt	eq
 8004798:	1949      	addeq	r1, r1, r5
 800479a:	6021      	streq	r1, [r4, #0]
 800479c:	6054      	str	r4, [r2, #4]
 800479e:	e7ca      	b.n	8004736 <_free_r+0x26>
 80047a0:	b003      	add	sp, #12
 80047a2:	bd30      	pop	{r4, r5, pc}
 80047a4:	20000190 	.word	0x20000190

080047a8 <sbrk_aligned>:
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	4e0e      	ldr	r6, [pc, #56]	; (80047e4 <sbrk_aligned+0x3c>)
 80047ac:	460c      	mov	r4, r1
 80047ae:	6831      	ldr	r1, [r6, #0]
 80047b0:	4605      	mov	r5, r0
 80047b2:	b911      	cbnz	r1, 80047ba <sbrk_aligned+0x12>
 80047b4:	f000 fb7a 	bl	8004eac <_sbrk_r>
 80047b8:	6030      	str	r0, [r6, #0]
 80047ba:	4621      	mov	r1, r4
 80047bc:	4628      	mov	r0, r5
 80047be:	f000 fb75 	bl	8004eac <_sbrk_r>
 80047c2:	1c43      	adds	r3, r0, #1
 80047c4:	d00a      	beq.n	80047dc <sbrk_aligned+0x34>
 80047c6:	1cc4      	adds	r4, r0, #3
 80047c8:	f024 0403 	bic.w	r4, r4, #3
 80047cc:	42a0      	cmp	r0, r4
 80047ce:	d007      	beq.n	80047e0 <sbrk_aligned+0x38>
 80047d0:	1a21      	subs	r1, r4, r0
 80047d2:	4628      	mov	r0, r5
 80047d4:	f000 fb6a 	bl	8004eac <_sbrk_r>
 80047d8:	3001      	adds	r0, #1
 80047da:	d101      	bne.n	80047e0 <sbrk_aligned+0x38>
 80047dc:	f04f 34ff 	mov.w	r4, #4294967295
 80047e0:	4620      	mov	r0, r4
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	20000194 	.word	0x20000194

080047e8 <_malloc_r>:
 80047e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ec:	1ccd      	adds	r5, r1, #3
 80047ee:	f025 0503 	bic.w	r5, r5, #3
 80047f2:	3508      	adds	r5, #8
 80047f4:	2d0c      	cmp	r5, #12
 80047f6:	bf38      	it	cc
 80047f8:	250c      	movcc	r5, #12
 80047fa:	2d00      	cmp	r5, #0
 80047fc:	4607      	mov	r7, r0
 80047fe:	db01      	blt.n	8004804 <_malloc_r+0x1c>
 8004800:	42a9      	cmp	r1, r5
 8004802:	d905      	bls.n	8004810 <_malloc_r+0x28>
 8004804:	230c      	movs	r3, #12
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	2600      	movs	r6, #0
 800480a:	4630      	mov	r0, r6
 800480c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004810:	4e2e      	ldr	r6, [pc, #184]	; (80048cc <_malloc_r+0xe4>)
 8004812:	f000 fbf5 	bl	8005000 <__malloc_lock>
 8004816:	6833      	ldr	r3, [r6, #0]
 8004818:	461c      	mov	r4, r3
 800481a:	bb34      	cbnz	r4, 800486a <_malloc_r+0x82>
 800481c:	4629      	mov	r1, r5
 800481e:	4638      	mov	r0, r7
 8004820:	f7ff ffc2 	bl	80047a8 <sbrk_aligned>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	4604      	mov	r4, r0
 8004828:	d14d      	bne.n	80048c6 <_malloc_r+0xde>
 800482a:	6834      	ldr	r4, [r6, #0]
 800482c:	4626      	mov	r6, r4
 800482e:	2e00      	cmp	r6, #0
 8004830:	d140      	bne.n	80048b4 <_malloc_r+0xcc>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	4631      	mov	r1, r6
 8004836:	4638      	mov	r0, r7
 8004838:	eb04 0803 	add.w	r8, r4, r3
 800483c:	f000 fb36 	bl	8004eac <_sbrk_r>
 8004840:	4580      	cmp	r8, r0
 8004842:	d13a      	bne.n	80048ba <_malloc_r+0xd2>
 8004844:	6821      	ldr	r1, [r4, #0]
 8004846:	3503      	adds	r5, #3
 8004848:	1a6d      	subs	r5, r5, r1
 800484a:	f025 0503 	bic.w	r5, r5, #3
 800484e:	3508      	adds	r5, #8
 8004850:	2d0c      	cmp	r5, #12
 8004852:	bf38      	it	cc
 8004854:	250c      	movcc	r5, #12
 8004856:	4629      	mov	r1, r5
 8004858:	4638      	mov	r0, r7
 800485a:	f7ff ffa5 	bl	80047a8 <sbrk_aligned>
 800485e:	3001      	adds	r0, #1
 8004860:	d02b      	beq.n	80048ba <_malloc_r+0xd2>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	442b      	add	r3, r5
 8004866:	6023      	str	r3, [r4, #0]
 8004868:	e00e      	b.n	8004888 <_malloc_r+0xa0>
 800486a:	6822      	ldr	r2, [r4, #0]
 800486c:	1b52      	subs	r2, r2, r5
 800486e:	d41e      	bmi.n	80048ae <_malloc_r+0xc6>
 8004870:	2a0b      	cmp	r2, #11
 8004872:	d916      	bls.n	80048a2 <_malloc_r+0xba>
 8004874:	1961      	adds	r1, r4, r5
 8004876:	42a3      	cmp	r3, r4
 8004878:	6025      	str	r5, [r4, #0]
 800487a:	bf18      	it	ne
 800487c:	6059      	strne	r1, [r3, #4]
 800487e:	6863      	ldr	r3, [r4, #4]
 8004880:	bf08      	it	eq
 8004882:	6031      	streq	r1, [r6, #0]
 8004884:	5162      	str	r2, [r4, r5]
 8004886:	604b      	str	r3, [r1, #4]
 8004888:	4638      	mov	r0, r7
 800488a:	f104 060b 	add.w	r6, r4, #11
 800488e:	f000 fbbd 	bl	800500c <__malloc_unlock>
 8004892:	f026 0607 	bic.w	r6, r6, #7
 8004896:	1d23      	adds	r3, r4, #4
 8004898:	1af2      	subs	r2, r6, r3
 800489a:	d0b6      	beq.n	800480a <_malloc_r+0x22>
 800489c:	1b9b      	subs	r3, r3, r6
 800489e:	50a3      	str	r3, [r4, r2]
 80048a0:	e7b3      	b.n	800480a <_malloc_r+0x22>
 80048a2:	6862      	ldr	r2, [r4, #4]
 80048a4:	42a3      	cmp	r3, r4
 80048a6:	bf0c      	ite	eq
 80048a8:	6032      	streq	r2, [r6, #0]
 80048aa:	605a      	strne	r2, [r3, #4]
 80048ac:	e7ec      	b.n	8004888 <_malloc_r+0xa0>
 80048ae:	4623      	mov	r3, r4
 80048b0:	6864      	ldr	r4, [r4, #4]
 80048b2:	e7b2      	b.n	800481a <_malloc_r+0x32>
 80048b4:	4634      	mov	r4, r6
 80048b6:	6876      	ldr	r6, [r6, #4]
 80048b8:	e7b9      	b.n	800482e <_malloc_r+0x46>
 80048ba:	230c      	movs	r3, #12
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	4638      	mov	r0, r7
 80048c0:	f000 fba4 	bl	800500c <__malloc_unlock>
 80048c4:	e7a1      	b.n	800480a <_malloc_r+0x22>
 80048c6:	6025      	str	r5, [r4, #0]
 80048c8:	e7de      	b.n	8004888 <_malloc_r+0xa0>
 80048ca:	bf00      	nop
 80048cc:	20000190 	.word	0x20000190

080048d0 <__sfputc_r>:
 80048d0:	6893      	ldr	r3, [r2, #8]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	b410      	push	{r4}
 80048d8:	6093      	str	r3, [r2, #8]
 80048da:	da08      	bge.n	80048ee <__sfputc_r+0x1e>
 80048dc:	6994      	ldr	r4, [r2, #24]
 80048de:	42a3      	cmp	r3, r4
 80048e0:	db01      	blt.n	80048e6 <__sfputc_r+0x16>
 80048e2:	290a      	cmp	r1, #10
 80048e4:	d103      	bne.n	80048ee <__sfputc_r+0x1e>
 80048e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048ea:	f7ff bc31 	b.w	8004150 <__swbuf_r>
 80048ee:	6813      	ldr	r3, [r2, #0]
 80048f0:	1c58      	adds	r0, r3, #1
 80048f2:	6010      	str	r0, [r2, #0]
 80048f4:	7019      	strb	r1, [r3, #0]
 80048f6:	4608      	mov	r0, r1
 80048f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <__sfputs_r>:
 80048fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004900:	4606      	mov	r6, r0
 8004902:	460f      	mov	r7, r1
 8004904:	4614      	mov	r4, r2
 8004906:	18d5      	adds	r5, r2, r3
 8004908:	42ac      	cmp	r4, r5
 800490a:	d101      	bne.n	8004910 <__sfputs_r+0x12>
 800490c:	2000      	movs	r0, #0
 800490e:	e007      	b.n	8004920 <__sfputs_r+0x22>
 8004910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004914:	463a      	mov	r2, r7
 8004916:	4630      	mov	r0, r6
 8004918:	f7ff ffda 	bl	80048d0 <__sfputc_r>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d1f3      	bne.n	8004908 <__sfputs_r+0xa>
 8004920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004924 <_vfiprintf_r>:
 8004924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004928:	460d      	mov	r5, r1
 800492a:	b09d      	sub	sp, #116	; 0x74
 800492c:	4614      	mov	r4, r2
 800492e:	4698      	mov	r8, r3
 8004930:	4606      	mov	r6, r0
 8004932:	b118      	cbz	r0, 800493c <_vfiprintf_r+0x18>
 8004934:	6983      	ldr	r3, [r0, #24]
 8004936:	b90b      	cbnz	r3, 800493c <_vfiprintf_r+0x18>
 8004938:	f7ff fde4 	bl	8004504 <__sinit>
 800493c:	4b89      	ldr	r3, [pc, #548]	; (8004b64 <_vfiprintf_r+0x240>)
 800493e:	429d      	cmp	r5, r3
 8004940:	d11b      	bne.n	800497a <_vfiprintf_r+0x56>
 8004942:	6875      	ldr	r5, [r6, #4]
 8004944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004946:	07d9      	lsls	r1, r3, #31
 8004948:	d405      	bmi.n	8004956 <_vfiprintf_r+0x32>
 800494a:	89ab      	ldrh	r3, [r5, #12]
 800494c:	059a      	lsls	r2, r3, #22
 800494e:	d402      	bmi.n	8004956 <_vfiprintf_r+0x32>
 8004950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004952:	f7ff fe75 	bl	8004640 <__retarget_lock_acquire_recursive>
 8004956:	89ab      	ldrh	r3, [r5, #12]
 8004958:	071b      	lsls	r3, r3, #28
 800495a:	d501      	bpl.n	8004960 <_vfiprintf_r+0x3c>
 800495c:	692b      	ldr	r3, [r5, #16]
 800495e:	b9eb      	cbnz	r3, 800499c <_vfiprintf_r+0x78>
 8004960:	4629      	mov	r1, r5
 8004962:	4630      	mov	r0, r6
 8004964:	f7ff fc46 	bl	80041f4 <__swsetup_r>
 8004968:	b1c0      	cbz	r0, 800499c <_vfiprintf_r+0x78>
 800496a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800496c:	07dc      	lsls	r4, r3, #31
 800496e:	d50e      	bpl.n	800498e <_vfiprintf_r+0x6a>
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	b01d      	add	sp, #116	; 0x74
 8004976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800497a:	4b7b      	ldr	r3, [pc, #492]	; (8004b68 <_vfiprintf_r+0x244>)
 800497c:	429d      	cmp	r5, r3
 800497e:	d101      	bne.n	8004984 <_vfiprintf_r+0x60>
 8004980:	68b5      	ldr	r5, [r6, #8]
 8004982:	e7df      	b.n	8004944 <_vfiprintf_r+0x20>
 8004984:	4b79      	ldr	r3, [pc, #484]	; (8004b6c <_vfiprintf_r+0x248>)
 8004986:	429d      	cmp	r5, r3
 8004988:	bf08      	it	eq
 800498a:	68f5      	ldreq	r5, [r6, #12]
 800498c:	e7da      	b.n	8004944 <_vfiprintf_r+0x20>
 800498e:	89ab      	ldrh	r3, [r5, #12]
 8004990:	0598      	lsls	r0, r3, #22
 8004992:	d4ed      	bmi.n	8004970 <_vfiprintf_r+0x4c>
 8004994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004996:	f7ff fe54 	bl	8004642 <__retarget_lock_release_recursive>
 800499a:	e7e9      	b.n	8004970 <_vfiprintf_r+0x4c>
 800499c:	2300      	movs	r3, #0
 800499e:	9309      	str	r3, [sp, #36]	; 0x24
 80049a0:	2320      	movs	r3, #32
 80049a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80049aa:	2330      	movs	r3, #48	; 0x30
 80049ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b70 <_vfiprintf_r+0x24c>
 80049b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049b4:	f04f 0901 	mov.w	r9, #1
 80049b8:	4623      	mov	r3, r4
 80049ba:	469a      	mov	sl, r3
 80049bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049c0:	b10a      	cbz	r2, 80049c6 <_vfiprintf_r+0xa2>
 80049c2:	2a25      	cmp	r2, #37	; 0x25
 80049c4:	d1f9      	bne.n	80049ba <_vfiprintf_r+0x96>
 80049c6:	ebba 0b04 	subs.w	fp, sl, r4
 80049ca:	d00b      	beq.n	80049e4 <_vfiprintf_r+0xc0>
 80049cc:	465b      	mov	r3, fp
 80049ce:	4622      	mov	r2, r4
 80049d0:	4629      	mov	r1, r5
 80049d2:	4630      	mov	r0, r6
 80049d4:	f7ff ff93 	bl	80048fe <__sfputs_r>
 80049d8:	3001      	adds	r0, #1
 80049da:	f000 80aa 	beq.w	8004b32 <_vfiprintf_r+0x20e>
 80049de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049e0:	445a      	add	r2, fp
 80049e2:	9209      	str	r2, [sp, #36]	; 0x24
 80049e4:	f89a 3000 	ldrb.w	r3, [sl]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80a2 	beq.w	8004b32 <_vfiprintf_r+0x20e>
 80049ee:	2300      	movs	r3, #0
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049f8:	f10a 0a01 	add.w	sl, sl, #1
 80049fc:	9304      	str	r3, [sp, #16]
 80049fe:	9307      	str	r3, [sp, #28]
 8004a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a04:	931a      	str	r3, [sp, #104]	; 0x68
 8004a06:	4654      	mov	r4, sl
 8004a08:	2205      	movs	r2, #5
 8004a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a0e:	4858      	ldr	r0, [pc, #352]	; (8004b70 <_vfiprintf_r+0x24c>)
 8004a10:	f7fb fc06 	bl	8000220 <memchr>
 8004a14:	9a04      	ldr	r2, [sp, #16]
 8004a16:	b9d8      	cbnz	r0, 8004a50 <_vfiprintf_r+0x12c>
 8004a18:	06d1      	lsls	r1, r2, #27
 8004a1a:	bf44      	itt	mi
 8004a1c:	2320      	movmi	r3, #32
 8004a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a22:	0713      	lsls	r3, r2, #28
 8004a24:	bf44      	itt	mi
 8004a26:	232b      	movmi	r3, #43	; 0x2b
 8004a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a30:	2b2a      	cmp	r3, #42	; 0x2a
 8004a32:	d015      	beq.n	8004a60 <_vfiprintf_r+0x13c>
 8004a34:	9a07      	ldr	r2, [sp, #28]
 8004a36:	4654      	mov	r4, sl
 8004a38:	2000      	movs	r0, #0
 8004a3a:	f04f 0c0a 	mov.w	ip, #10
 8004a3e:	4621      	mov	r1, r4
 8004a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a44:	3b30      	subs	r3, #48	; 0x30
 8004a46:	2b09      	cmp	r3, #9
 8004a48:	d94e      	bls.n	8004ae8 <_vfiprintf_r+0x1c4>
 8004a4a:	b1b0      	cbz	r0, 8004a7a <_vfiprintf_r+0x156>
 8004a4c:	9207      	str	r2, [sp, #28]
 8004a4e:	e014      	b.n	8004a7a <_vfiprintf_r+0x156>
 8004a50:	eba0 0308 	sub.w	r3, r0, r8
 8004a54:	fa09 f303 	lsl.w	r3, r9, r3
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	9304      	str	r3, [sp, #16]
 8004a5c:	46a2      	mov	sl, r4
 8004a5e:	e7d2      	b.n	8004a06 <_vfiprintf_r+0xe2>
 8004a60:	9b03      	ldr	r3, [sp, #12]
 8004a62:	1d19      	adds	r1, r3, #4
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	9103      	str	r1, [sp, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bfbb      	ittet	lt
 8004a6c:	425b      	neglt	r3, r3
 8004a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8004a72:	9307      	strge	r3, [sp, #28]
 8004a74:	9307      	strlt	r3, [sp, #28]
 8004a76:	bfb8      	it	lt
 8004a78:	9204      	strlt	r2, [sp, #16]
 8004a7a:	7823      	ldrb	r3, [r4, #0]
 8004a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a7e:	d10c      	bne.n	8004a9a <_vfiprintf_r+0x176>
 8004a80:	7863      	ldrb	r3, [r4, #1]
 8004a82:	2b2a      	cmp	r3, #42	; 0x2a
 8004a84:	d135      	bne.n	8004af2 <_vfiprintf_r+0x1ce>
 8004a86:	9b03      	ldr	r3, [sp, #12]
 8004a88:	1d1a      	adds	r2, r3, #4
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	9203      	str	r2, [sp, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bfb8      	it	lt
 8004a92:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a96:	3402      	adds	r4, #2
 8004a98:	9305      	str	r3, [sp, #20]
 8004a9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b80 <_vfiprintf_r+0x25c>
 8004a9e:	7821      	ldrb	r1, [r4, #0]
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	4650      	mov	r0, sl
 8004aa4:	f7fb fbbc 	bl	8000220 <memchr>
 8004aa8:	b140      	cbz	r0, 8004abc <_vfiprintf_r+0x198>
 8004aaa:	2340      	movs	r3, #64	; 0x40
 8004aac:	eba0 000a 	sub.w	r0, r0, sl
 8004ab0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ab4:	9b04      	ldr	r3, [sp, #16]
 8004ab6:	4303      	orrs	r3, r0
 8004ab8:	3401      	adds	r4, #1
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ac0:	482c      	ldr	r0, [pc, #176]	; (8004b74 <_vfiprintf_r+0x250>)
 8004ac2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ac6:	2206      	movs	r2, #6
 8004ac8:	f7fb fbaa 	bl	8000220 <memchr>
 8004acc:	2800      	cmp	r0, #0
 8004ace:	d03f      	beq.n	8004b50 <_vfiprintf_r+0x22c>
 8004ad0:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <_vfiprintf_r+0x254>)
 8004ad2:	bb1b      	cbnz	r3, 8004b1c <_vfiprintf_r+0x1f8>
 8004ad4:	9b03      	ldr	r3, [sp, #12]
 8004ad6:	3307      	adds	r3, #7
 8004ad8:	f023 0307 	bic.w	r3, r3, #7
 8004adc:	3308      	adds	r3, #8
 8004ade:	9303      	str	r3, [sp, #12]
 8004ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae2:	443b      	add	r3, r7
 8004ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae6:	e767      	b.n	80049b8 <_vfiprintf_r+0x94>
 8004ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004aec:	460c      	mov	r4, r1
 8004aee:	2001      	movs	r0, #1
 8004af0:	e7a5      	b.n	8004a3e <_vfiprintf_r+0x11a>
 8004af2:	2300      	movs	r3, #0
 8004af4:	3401      	adds	r4, #1
 8004af6:	9305      	str	r3, [sp, #20]
 8004af8:	4619      	mov	r1, r3
 8004afa:	f04f 0c0a 	mov.w	ip, #10
 8004afe:	4620      	mov	r0, r4
 8004b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b04:	3a30      	subs	r2, #48	; 0x30
 8004b06:	2a09      	cmp	r2, #9
 8004b08:	d903      	bls.n	8004b12 <_vfiprintf_r+0x1ee>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0c5      	beq.n	8004a9a <_vfiprintf_r+0x176>
 8004b0e:	9105      	str	r1, [sp, #20]
 8004b10:	e7c3      	b.n	8004a9a <_vfiprintf_r+0x176>
 8004b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b16:	4604      	mov	r4, r0
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e7f0      	b.n	8004afe <_vfiprintf_r+0x1da>
 8004b1c:	ab03      	add	r3, sp, #12
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	462a      	mov	r2, r5
 8004b22:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <_vfiprintf_r+0x258>)
 8004b24:	a904      	add	r1, sp, #16
 8004b26:	4630      	mov	r0, r6
 8004b28:	f3af 8000 	nop.w
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	1c78      	adds	r0, r7, #1
 8004b30:	d1d6      	bne.n	8004ae0 <_vfiprintf_r+0x1bc>
 8004b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b34:	07d9      	lsls	r1, r3, #31
 8004b36:	d405      	bmi.n	8004b44 <_vfiprintf_r+0x220>
 8004b38:	89ab      	ldrh	r3, [r5, #12]
 8004b3a:	059a      	lsls	r2, r3, #22
 8004b3c:	d402      	bmi.n	8004b44 <_vfiprintf_r+0x220>
 8004b3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b40:	f7ff fd7f 	bl	8004642 <__retarget_lock_release_recursive>
 8004b44:	89ab      	ldrh	r3, [r5, #12]
 8004b46:	065b      	lsls	r3, r3, #25
 8004b48:	f53f af12 	bmi.w	8004970 <_vfiprintf_r+0x4c>
 8004b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b4e:	e711      	b.n	8004974 <_vfiprintf_r+0x50>
 8004b50:	ab03      	add	r3, sp, #12
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	462a      	mov	r2, r5
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <_vfiprintf_r+0x258>)
 8004b58:	a904      	add	r1, sp, #16
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f000 f880 	bl	8004c60 <_printf_i>
 8004b60:	e7e4      	b.n	8004b2c <_vfiprintf_r+0x208>
 8004b62:	bf00      	nop
 8004b64:	0800511c 	.word	0x0800511c
 8004b68:	0800513c 	.word	0x0800513c
 8004b6c:	080050fc 	.word	0x080050fc
 8004b70:	0800515c 	.word	0x0800515c
 8004b74:	08005166 	.word	0x08005166
 8004b78:	00000000 	.word	0x00000000
 8004b7c:	080048ff 	.word	0x080048ff
 8004b80:	08005162 	.word	0x08005162

08004b84 <_printf_common>:
 8004b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b88:	4616      	mov	r6, r2
 8004b8a:	4699      	mov	r9, r3
 8004b8c:	688a      	ldr	r2, [r1, #8]
 8004b8e:	690b      	ldr	r3, [r1, #16]
 8004b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b94:	4293      	cmp	r3, r2
 8004b96:	bfb8      	it	lt
 8004b98:	4613      	movlt	r3, r2
 8004b9a:	6033      	str	r3, [r6, #0]
 8004b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	b10a      	cbz	r2, 8004baa <_printf_common+0x26>
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	6033      	str	r3, [r6, #0]
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	0699      	lsls	r1, r3, #26
 8004bae:	bf42      	ittt	mi
 8004bb0:	6833      	ldrmi	r3, [r6, #0]
 8004bb2:	3302      	addmi	r3, #2
 8004bb4:	6033      	strmi	r3, [r6, #0]
 8004bb6:	6825      	ldr	r5, [r4, #0]
 8004bb8:	f015 0506 	ands.w	r5, r5, #6
 8004bbc:	d106      	bne.n	8004bcc <_printf_common+0x48>
 8004bbe:	f104 0a19 	add.w	sl, r4, #25
 8004bc2:	68e3      	ldr	r3, [r4, #12]
 8004bc4:	6832      	ldr	r2, [r6, #0]
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	dc26      	bgt.n	8004c1a <_printf_common+0x96>
 8004bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bd0:	1e13      	subs	r3, r2, #0
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	bf18      	it	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	0692      	lsls	r2, r2, #26
 8004bda:	d42b      	bmi.n	8004c34 <_printf_common+0xb0>
 8004bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be0:	4649      	mov	r1, r9
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	3001      	adds	r0, #1
 8004be8:	d01e      	beq.n	8004c28 <_printf_common+0xa4>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	68e5      	ldr	r5, [r4, #12]
 8004bee:	6832      	ldr	r2, [r6, #0]
 8004bf0:	f003 0306 	and.w	r3, r3, #6
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	bf08      	it	eq
 8004bf8:	1aad      	subeq	r5, r5, r2
 8004bfa:	68a3      	ldr	r3, [r4, #8]
 8004bfc:	6922      	ldr	r2, [r4, #16]
 8004bfe:	bf0c      	ite	eq
 8004c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c04:	2500      	movne	r5, #0
 8004c06:	4293      	cmp	r3, r2
 8004c08:	bfc4      	itt	gt
 8004c0a:	1a9b      	subgt	r3, r3, r2
 8004c0c:	18ed      	addgt	r5, r5, r3
 8004c0e:	2600      	movs	r6, #0
 8004c10:	341a      	adds	r4, #26
 8004c12:	42b5      	cmp	r5, r6
 8004c14:	d11a      	bne.n	8004c4c <_printf_common+0xc8>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e008      	b.n	8004c2c <_printf_common+0xa8>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	4649      	mov	r1, r9
 8004c20:	4638      	mov	r0, r7
 8004c22:	47c0      	blx	r8
 8004c24:	3001      	adds	r0, #1
 8004c26:	d103      	bne.n	8004c30 <_printf_common+0xac>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c30:	3501      	adds	r5, #1
 8004c32:	e7c6      	b.n	8004bc2 <_printf_common+0x3e>
 8004c34:	18e1      	adds	r1, r4, r3
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	2030      	movs	r0, #48	; 0x30
 8004c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c3e:	4422      	add	r2, r4
 8004c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c48:	3302      	adds	r3, #2
 8004c4a:	e7c7      	b.n	8004bdc <_printf_common+0x58>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4622      	mov	r2, r4
 8004c50:	4649      	mov	r1, r9
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c0      	blx	r8
 8004c56:	3001      	adds	r0, #1
 8004c58:	d0e6      	beq.n	8004c28 <_printf_common+0xa4>
 8004c5a:	3601      	adds	r6, #1
 8004c5c:	e7d9      	b.n	8004c12 <_printf_common+0x8e>
	...

08004c60 <_printf_i>:
 8004c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	7e0f      	ldrb	r7, [r1, #24]
 8004c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c68:	2f78      	cmp	r7, #120	; 0x78
 8004c6a:	4691      	mov	r9, r2
 8004c6c:	4680      	mov	r8, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	469a      	mov	sl, r3
 8004c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c76:	d807      	bhi.n	8004c88 <_printf_i+0x28>
 8004c78:	2f62      	cmp	r7, #98	; 0x62
 8004c7a:	d80a      	bhi.n	8004c92 <_printf_i+0x32>
 8004c7c:	2f00      	cmp	r7, #0
 8004c7e:	f000 80d8 	beq.w	8004e32 <_printf_i+0x1d2>
 8004c82:	2f58      	cmp	r7, #88	; 0x58
 8004c84:	f000 80a3 	beq.w	8004dce <_printf_i+0x16e>
 8004c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c90:	e03a      	b.n	8004d08 <_printf_i+0xa8>
 8004c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c96:	2b15      	cmp	r3, #21
 8004c98:	d8f6      	bhi.n	8004c88 <_printf_i+0x28>
 8004c9a:	a101      	add	r1, pc, #4	; (adr r1, 8004ca0 <_printf_i+0x40>)
 8004c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004c89 	.word	0x08004c89
 8004cac:	08004c89 	.word	0x08004c89
 8004cb0:	08004c89 	.word	0x08004c89
 8004cb4:	08004c89 	.word	0x08004c89
 8004cb8:	08004d0d 	.word	0x08004d0d
 8004cbc:	08004c89 	.word	0x08004c89
 8004cc0:	08004c89 	.word	0x08004c89
 8004cc4:	08004c89 	.word	0x08004c89
 8004cc8:	08004c89 	.word	0x08004c89
 8004ccc:	08004e19 	.word	0x08004e19
 8004cd0:	08004d3d 	.word	0x08004d3d
 8004cd4:	08004dfb 	.word	0x08004dfb
 8004cd8:	08004c89 	.word	0x08004c89
 8004cdc:	08004c89 	.word	0x08004c89
 8004ce0:	08004e3b 	.word	0x08004e3b
 8004ce4:	08004c89 	.word	0x08004c89
 8004ce8:	08004d3d 	.word	0x08004d3d
 8004cec:	08004c89 	.word	0x08004c89
 8004cf0:	08004c89 	.word	0x08004c89
 8004cf4:	08004e03 	.word	0x08004e03
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	602a      	str	r2, [r5, #0]
 8004d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0a3      	b.n	8004e54 <_printf_i+0x1f4>
 8004d0c:	6820      	ldr	r0, [r4, #0]
 8004d0e:	6829      	ldr	r1, [r5, #0]
 8004d10:	0606      	lsls	r6, r0, #24
 8004d12:	f101 0304 	add.w	r3, r1, #4
 8004d16:	d50a      	bpl.n	8004d2e <_printf_i+0xce>
 8004d18:	680e      	ldr	r6, [r1, #0]
 8004d1a:	602b      	str	r3, [r5, #0]
 8004d1c:	2e00      	cmp	r6, #0
 8004d1e:	da03      	bge.n	8004d28 <_printf_i+0xc8>
 8004d20:	232d      	movs	r3, #45	; 0x2d
 8004d22:	4276      	negs	r6, r6
 8004d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d28:	485e      	ldr	r0, [pc, #376]	; (8004ea4 <_printf_i+0x244>)
 8004d2a:	230a      	movs	r3, #10
 8004d2c:	e019      	b.n	8004d62 <_printf_i+0x102>
 8004d2e:	680e      	ldr	r6, [r1, #0]
 8004d30:	602b      	str	r3, [r5, #0]
 8004d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d36:	bf18      	it	ne
 8004d38:	b236      	sxthne	r6, r6
 8004d3a:	e7ef      	b.n	8004d1c <_printf_i+0xbc>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	6820      	ldr	r0, [r4, #0]
 8004d40:	1d19      	adds	r1, r3, #4
 8004d42:	6029      	str	r1, [r5, #0]
 8004d44:	0601      	lsls	r1, r0, #24
 8004d46:	d501      	bpl.n	8004d4c <_printf_i+0xec>
 8004d48:	681e      	ldr	r6, [r3, #0]
 8004d4a:	e002      	b.n	8004d52 <_printf_i+0xf2>
 8004d4c:	0646      	lsls	r6, r0, #25
 8004d4e:	d5fb      	bpl.n	8004d48 <_printf_i+0xe8>
 8004d50:	881e      	ldrh	r6, [r3, #0]
 8004d52:	4854      	ldr	r0, [pc, #336]	; (8004ea4 <_printf_i+0x244>)
 8004d54:	2f6f      	cmp	r7, #111	; 0x6f
 8004d56:	bf0c      	ite	eq
 8004d58:	2308      	moveq	r3, #8
 8004d5a:	230a      	movne	r3, #10
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d62:	6865      	ldr	r5, [r4, #4]
 8004d64:	60a5      	str	r5, [r4, #8]
 8004d66:	2d00      	cmp	r5, #0
 8004d68:	bfa2      	ittt	ge
 8004d6a:	6821      	ldrge	r1, [r4, #0]
 8004d6c:	f021 0104 	bicge.w	r1, r1, #4
 8004d70:	6021      	strge	r1, [r4, #0]
 8004d72:	b90e      	cbnz	r6, 8004d78 <_printf_i+0x118>
 8004d74:	2d00      	cmp	r5, #0
 8004d76:	d04d      	beq.n	8004e14 <_printf_i+0x1b4>
 8004d78:	4615      	mov	r5, r2
 8004d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d82:	5dc7      	ldrb	r7, [r0, r7]
 8004d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d88:	4637      	mov	r7, r6
 8004d8a:	42bb      	cmp	r3, r7
 8004d8c:	460e      	mov	r6, r1
 8004d8e:	d9f4      	bls.n	8004d7a <_printf_i+0x11a>
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d10b      	bne.n	8004dac <_printf_i+0x14c>
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	07de      	lsls	r6, r3, #31
 8004d98:	d508      	bpl.n	8004dac <_printf_i+0x14c>
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	6861      	ldr	r1, [r4, #4]
 8004d9e:	4299      	cmp	r1, r3
 8004da0:	bfde      	ittt	le
 8004da2:	2330      	movle	r3, #48	; 0x30
 8004da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004da8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dac:	1b52      	subs	r2, r2, r5
 8004dae:	6122      	str	r2, [r4, #16]
 8004db0:	f8cd a000 	str.w	sl, [sp]
 8004db4:	464b      	mov	r3, r9
 8004db6:	aa03      	add	r2, sp, #12
 8004db8:	4621      	mov	r1, r4
 8004dba:	4640      	mov	r0, r8
 8004dbc:	f7ff fee2 	bl	8004b84 <_printf_common>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d14c      	bne.n	8004e5e <_printf_i+0x1fe>
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	b004      	add	sp, #16
 8004dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dce:	4835      	ldr	r0, [pc, #212]	; (8004ea4 <_printf_i+0x244>)
 8004dd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004dd4:	6829      	ldr	r1, [r5, #0]
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ddc:	6029      	str	r1, [r5, #0]
 8004dde:	061d      	lsls	r5, r3, #24
 8004de0:	d514      	bpl.n	8004e0c <_printf_i+0x1ac>
 8004de2:	07df      	lsls	r7, r3, #31
 8004de4:	bf44      	itt	mi
 8004de6:	f043 0320 	orrmi.w	r3, r3, #32
 8004dea:	6023      	strmi	r3, [r4, #0]
 8004dec:	b91e      	cbnz	r6, 8004df6 <_printf_i+0x196>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f023 0320 	bic.w	r3, r3, #32
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	2310      	movs	r3, #16
 8004df8:	e7b0      	b.n	8004d5c <_printf_i+0xfc>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	f043 0320 	orr.w	r3, r3, #32
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	2378      	movs	r3, #120	; 0x78
 8004e04:	4828      	ldr	r0, [pc, #160]	; (8004ea8 <_printf_i+0x248>)
 8004e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e0a:	e7e3      	b.n	8004dd4 <_printf_i+0x174>
 8004e0c:	0659      	lsls	r1, r3, #25
 8004e0e:	bf48      	it	mi
 8004e10:	b2b6      	uxthmi	r6, r6
 8004e12:	e7e6      	b.n	8004de2 <_printf_i+0x182>
 8004e14:	4615      	mov	r5, r2
 8004e16:	e7bb      	b.n	8004d90 <_printf_i+0x130>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	6826      	ldr	r6, [r4, #0]
 8004e1c:	6961      	ldr	r1, [r4, #20]
 8004e1e:	1d18      	adds	r0, r3, #4
 8004e20:	6028      	str	r0, [r5, #0]
 8004e22:	0635      	lsls	r5, r6, #24
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	d501      	bpl.n	8004e2c <_printf_i+0x1cc>
 8004e28:	6019      	str	r1, [r3, #0]
 8004e2a:	e002      	b.n	8004e32 <_printf_i+0x1d2>
 8004e2c:	0670      	lsls	r0, r6, #25
 8004e2e:	d5fb      	bpl.n	8004e28 <_printf_i+0x1c8>
 8004e30:	8019      	strh	r1, [r3, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	4615      	mov	r5, r2
 8004e38:	e7ba      	b.n	8004db0 <_printf_i+0x150>
 8004e3a:	682b      	ldr	r3, [r5, #0]
 8004e3c:	1d1a      	adds	r2, r3, #4
 8004e3e:	602a      	str	r2, [r5, #0]
 8004e40:	681d      	ldr	r5, [r3, #0]
 8004e42:	6862      	ldr	r2, [r4, #4]
 8004e44:	2100      	movs	r1, #0
 8004e46:	4628      	mov	r0, r5
 8004e48:	f7fb f9ea 	bl	8000220 <memchr>
 8004e4c:	b108      	cbz	r0, 8004e52 <_printf_i+0x1f2>
 8004e4e:	1b40      	subs	r0, r0, r5
 8004e50:	6060      	str	r0, [r4, #4]
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	2300      	movs	r3, #0
 8004e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e5c:	e7a8      	b.n	8004db0 <_printf_i+0x150>
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	462a      	mov	r2, r5
 8004e62:	4649      	mov	r1, r9
 8004e64:	4640      	mov	r0, r8
 8004e66:	47d0      	blx	sl
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d0ab      	beq.n	8004dc4 <_printf_i+0x164>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	079b      	lsls	r3, r3, #30
 8004e70:	d413      	bmi.n	8004e9a <_printf_i+0x23a>
 8004e72:	68e0      	ldr	r0, [r4, #12]
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	4298      	cmp	r0, r3
 8004e78:	bfb8      	it	lt
 8004e7a:	4618      	movlt	r0, r3
 8004e7c:	e7a4      	b.n	8004dc8 <_printf_i+0x168>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4632      	mov	r2, r6
 8004e82:	4649      	mov	r1, r9
 8004e84:	4640      	mov	r0, r8
 8004e86:	47d0      	blx	sl
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d09b      	beq.n	8004dc4 <_printf_i+0x164>
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	9903      	ldr	r1, [sp, #12]
 8004e92:	1a5b      	subs	r3, r3, r1
 8004e94:	42ab      	cmp	r3, r5
 8004e96:	dcf2      	bgt.n	8004e7e <_printf_i+0x21e>
 8004e98:	e7eb      	b.n	8004e72 <_printf_i+0x212>
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	f104 0619 	add.w	r6, r4, #25
 8004ea0:	e7f5      	b.n	8004e8e <_printf_i+0x22e>
 8004ea2:	bf00      	nop
 8004ea4:	0800516d 	.word	0x0800516d
 8004ea8:	0800517e 	.word	0x0800517e

08004eac <_sbrk_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4d06      	ldr	r5, [pc, #24]	; (8004ec8 <_sbrk_r+0x1c>)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	f7fb ffae 	bl	8000e18 <_sbrk>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d102      	bne.n	8004ec6 <_sbrk_r+0x1a>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	b103      	cbz	r3, 8004ec6 <_sbrk_r+0x1a>
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	20000198 	.word	0x20000198

08004ecc <__sread>:
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	460c      	mov	r4, r1
 8004ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed4:	f000 f8a0 	bl	8005018 <_read_r>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	bfab      	itete	ge
 8004edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ede:	89a3      	ldrhlt	r3, [r4, #12]
 8004ee0:	181b      	addge	r3, r3, r0
 8004ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ee6:	bfac      	ite	ge
 8004ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004eea:	81a3      	strhlt	r3, [r4, #12]
 8004eec:	bd10      	pop	{r4, pc}

08004eee <__swrite>:
 8004eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef2:	461f      	mov	r7, r3
 8004ef4:	898b      	ldrh	r3, [r1, #12]
 8004ef6:	05db      	lsls	r3, r3, #23
 8004ef8:	4605      	mov	r5, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	4616      	mov	r6, r2
 8004efe:	d505      	bpl.n	8004f0c <__swrite+0x1e>
 8004f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f04:	2302      	movs	r3, #2
 8004f06:	2200      	movs	r2, #0
 8004f08:	f000 f868 	bl	8004fdc <_lseek_r>
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	4632      	mov	r2, r6
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f22:	f000 b817 	b.w	8004f54 <_write_r>

08004f26 <__sseek>:
 8004f26:	b510      	push	{r4, lr}
 8004f28:	460c      	mov	r4, r1
 8004f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2e:	f000 f855 	bl	8004fdc <_lseek_r>
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	bf15      	itete	ne
 8004f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f42:	81a3      	strheq	r3, [r4, #12]
 8004f44:	bf18      	it	ne
 8004f46:	81a3      	strhne	r3, [r4, #12]
 8004f48:	bd10      	pop	{r4, pc}

08004f4a <__sclose>:
 8004f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f4e:	f000 b813 	b.w	8004f78 <_close_r>
	...

08004f54 <_write_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	4d07      	ldr	r5, [pc, #28]	; (8004f74 <_write_r+0x20>)
 8004f58:	4604      	mov	r4, r0
 8004f5a:	4608      	mov	r0, r1
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	2200      	movs	r2, #0
 8004f60:	602a      	str	r2, [r5, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f7fb ff07 	bl	8000d76 <_write>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_write_r+0x1e>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_write_r+0x1e>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	20000198 	.word	0x20000198

08004f78 <_close_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4d06      	ldr	r5, [pc, #24]	; (8004f94 <_close_r+0x1c>)
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	4604      	mov	r4, r0
 8004f80:	4608      	mov	r0, r1
 8004f82:	602b      	str	r3, [r5, #0]
 8004f84:	f7fb ff13 	bl	8000dae <_close>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_close_r+0x1a>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_close_r+0x1a>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	20000198 	.word	0x20000198

08004f98 <_fstat_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4d07      	ldr	r5, [pc, #28]	; (8004fb8 <_fstat_r+0x20>)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	602b      	str	r3, [r5, #0]
 8004fa6:	f7fb ff0e 	bl	8000dc6 <_fstat>
 8004faa:	1c43      	adds	r3, r0, #1
 8004fac:	d102      	bne.n	8004fb4 <_fstat_r+0x1c>
 8004fae:	682b      	ldr	r3, [r5, #0]
 8004fb0:	b103      	cbz	r3, 8004fb4 <_fstat_r+0x1c>
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	bd38      	pop	{r3, r4, r5, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000198 	.word	0x20000198

08004fbc <_isatty_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4d06      	ldr	r5, [pc, #24]	; (8004fd8 <_isatty_r+0x1c>)
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	602b      	str	r3, [r5, #0]
 8004fc8:	f7fb ff0d 	bl	8000de6 <_isatty>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_isatty_r+0x1a>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_isatty_r+0x1a>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	20000198 	.word	0x20000198

08004fdc <_lseek_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4d07      	ldr	r5, [pc, #28]	; (8004ffc <_lseek_r+0x20>)
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	602a      	str	r2, [r5, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f7fb ff06 	bl	8000dfc <_lseek>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_lseek_r+0x1e>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_lseek_r+0x1e>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	20000198 	.word	0x20000198

08005000 <__malloc_lock>:
 8005000:	4801      	ldr	r0, [pc, #4]	; (8005008 <__malloc_lock+0x8>)
 8005002:	f7ff bb1d 	b.w	8004640 <__retarget_lock_acquire_recursive>
 8005006:	bf00      	nop
 8005008:	2000018c 	.word	0x2000018c

0800500c <__malloc_unlock>:
 800500c:	4801      	ldr	r0, [pc, #4]	; (8005014 <__malloc_unlock+0x8>)
 800500e:	f7ff bb18 	b.w	8004642 <__retarget_lock_release_recursive>
 8005012:	bf00      	nop
 8005014:	2000018c 	.word	0x2000018c

08005018 <_read_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4d07      	ldr	r5, [pc, #28]	; (8005038 <_read_r+0x20>)
 800501c:	4604      	mov	r4, r0
 800501e:	4608      	mov	r0, r1
 8005020:	4611      	mov	r1, r2
 8005022:	2200      	movs	r2, #0
 8005024:	602a      	str	r2, [r5, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	f7fb fe88 	bl	8000d3c <_read>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_read_r+0x1e>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_read_r+0x1e>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	20000198 	.word	0x20000198

0800503c <_init>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	bf00      	nop
 8005040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005042:	bc08      	pop	{r3}
 8005044:	469e      	mov	lr, r3
 8005046:	4770      	bx	lr

08005048 <_fini>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr
